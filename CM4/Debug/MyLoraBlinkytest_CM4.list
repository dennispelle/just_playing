
MyLoraBlinkytest_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004174  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046cc  080046cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046d4  080046d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d4  080046d4  000146d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080046dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  080046e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  080046e8  00020124  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fafc  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f3f  00000000  00000000  0002fb32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00031a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00032a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0c7  00000000  00000000  000338e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e767  00000000  00000000  0004e9a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abb4b  00000000  00000000  0005d10e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00108c59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe0  00000000  00000000  00108cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08004294 	.word	0x08004294

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08004294 	.word	0x08004294

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b96c 	b.w	8000468 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	468e      	mov	lr, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	f040 8082 	bne.w	80002be <__udivmoddi4+0x116>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4617      	mov	r7, r2
 80001be:	d946      	bls.n	800024e <__udivmoddi4+0xa6>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c6:	f1c2 0120 	rsb	r1, r2, #32
 80001ca:	fa05 f302 	lsl.w	r3, r5, r2
 80001ce:	fa20 f101 	lsr.w	r1, r0, r1
 80001d2:	4097      	lsls	r7, r2
 80001d4:	ea41 0e03 	orr.w	lr, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbbe fcf8 	udiv	ip, lr, r8
 80001e4:	b2b9      	uxth	r1, r7
 80001e6:	fb08 ee1c 	mls	lr, r8, ip, lr
 80001ea:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80001ee:	fb0c f001 	mul.w	r0, ip, r1
 80001f2:	4298      	cmp	r0, r3
 80001f4:	d90a      	bls.n	800020c <__udivmoddi4+0x64>
 80001f6:	18fb      	adds	r3, r7, r3
 80001f8:	f10c 35ff 	add.w	r5, ip, #4294967295
 80001fc:	f080 8116 	bcs.w	800042c <__udivmoddi4+0x284>
 8000200:	4298      	cmp	r0, r3
 8000202:	f240 8113 	bls.w	800042c <__udivmoddi4+0x284>
 8000206:	f1ac 0c02 	sub.w	ip, ip, #2
 800020a:	443b      	add	r3, r7
 800020c:	1a1b      	subs	r3, r3, r0
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0f8 	udiv	r0, r3, r8
 8000214:	fb08 3310 	mls	r3, r8, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 f101 	mul.w	r1, r0, r1
 8000220:	42a1      	cmp	r1, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x90>
 8000224:	193c      	adds	r4, r7, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8101 	bcs.w	8000430 <__udivmoddi4+0x288>
 800022e:	42a1      	cmp	r1, r4
 8000230:	f240 80fe 	bls.w	8000430 <__udivmoddi4+0x288>
 8000234:	3802      	subs	r0, #2
 8000236:	443c      	add	r4, r7
 8000238:	1a64      	subs	r4, r4, r1
 800023a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800023e:	2100      	movs	r1, #0
 8000240:	b11e      	cbz	r6, 800024a <__udivmoddi4+0xa2>
 8000242:	40d4      	lsrs	r4, r2
 8000244:	2300      	movs	r3, #0
 8000246:	e9c6 4300 	strd	r4, r3, [r6]
 800024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024e:	b902      	cbnz	r2, 8000252 <__udivmoddi4+0xaa>
 8000250:	deff      	udf	#255	; 0xff
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	2a00      	cmp	r2, #0
 8000258:	d14f      	bne.n	80002fa <__udivmoddi4+0x152>
 800025a:	1bcb      	subs	r3, r1, r7
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f f887 	uxth.w	r8, r7
 8000264:	2101      	movs	r1, #1
 8000266:	fbb3 fcfe 	udiv	ip, r3, lr
 800026a:	0c25      	lsrs	r5, r4, #16
 800026c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000270:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000274:	fb08 f30c 	mul.w	r3, r8, ip
 8000278:	42ab      	cmp	r3, r5
 800027a:	d907      	bls.n	800028c <__udivmoddi4+0xe4>
 800027c:	197d      	adds	r5, r7, r5
 800027e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000282:	d202      	bcs.n	800028a <__udivmoddi4+0xe2>
 8000284:	42ab      	cmp	r3, r5
 8000286:	f200 80e7 	bhi.w	8000458 <__udivmoddi4+0x2b0>
 800028a:	4684      	mov	ip, r0
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a3      	uxth	r3, r4
 8000290:	fbb5 f0fe 	udiv	r0, r5, lr
 8000294:	fb0e 5510 	mls	r5, lr, r0, r5
 8000298:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	45a0      	cmp	r8, r4
 80002a2:	d907      	bls.n	80002b4 <__udivmoddi4+0x10c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	d202      	bcs.n	80002b2 <__udivmoddi4+0x10a>
 80002ac:	45a0      	cmp	r8, r4
 80002ae:	f200 80d7 	bhi.w	8000460 <__udivmoddi4+0x2b8>
 80002b2:	4618      	mov	r0, r3
 80002b4:	eba4 0408 	sub.w	r4, r4, r8
 80002b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002bc:	e7c0      	b.n	8000240 <__udivmoddi4+0x98>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80af 	beq.w	8000426 <__udivmoddi4+0x27e>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d14b      	bne.n	8000374 <__udivmoddi4+0x1cc>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0x13e>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80b7 	bhi.w	8000454 <__udivmoddi4+0x2ac>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0303 	sbc.w	r3, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	469e      	mov	lr, r3
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0aa      	beq.n	800024a <__udivmoddi4+0xa2>
 80002f4:	e9c6 4e00 	strd	r4, lr, [r6]
 80002f8:	e7a7      	b.n	800024a <__udivmoddi4+0xa2>
 80002fa:	f1c2 0c20 	rsb	ip, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	4097      	lsls	r7, r2
 8000304:	fa20 f00c 	lsr.w	r0, r0, ip
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000310:	4318      	orrs	r0, r3
 8000312:	fbbc f1fe 	udiv	r1, ip, lr
 8000316:	0c05      	lsrs	r5, r0, #16
 8000318:	fb0e cc11 	mls	ip, lr, r1, ip
 800031c:	fa1f f887 	uxth.w	r8, r7
 8000320:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000324:	fb01 f308 	mul.w	r3, r1, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	fa04 f402 	lsl.w	r4, r4, r2
 800032e:	d909      	bls.n	8000344 <__udivmoddi4+0x19c>
 8000330:	197d      	adds	r5, r7, r5
 8000332:	f101 3cff 	add.w	ip, r1, #4294967295
 8000336:	f080 808b 	bcs.w	8000450 <__udivmoddi4+0x2a8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	f240 8088 	bls.w	8000450 <__udivmoddi4+0x2a8>
 8000340:	3902      	subs	r1, #2
 8000342:	443d      	add	r5, r7
 8000344:	1aeb      	subs	r3, r5, r3
 8000346:	b285      	uxth	r5, r0
 8000348:	fbb3 f0fe 	udiv	r0, r3, lr
 800034c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000350:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000354:	fb00 f308 	mul.w	r3, r0, r8
 8000358:	42ab      	cmp	r3, r5
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x1c4>
 800035c:	197d      	adds	r5, r7, r5
 800035e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000362:	d271      	bcs.n	8000448 <__udivmoddi4+0x2a0>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d96f      	bls.n	8000448 <__udivmoddi4+0x2a0>
 8000368:	3802      	subs	r0, #2
 800036a:	443d      	add	r5, r7
 800036c:	1aeb      	subs	r3, r5, r3
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	e778      	b.n	8000266 <__udivmoddi4+0xbe>
 8000374:	f1c1 0c20 	rsb	ip, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 f70c 	lsr.w	r7, r2, ip
 800037e:	431f      	orrs	r7, r3
 8000380:	fa20 f40c 	lsr.w	r4, r0, ip
 8000384:	fa05 f301 	lsl.w	r3, r5, r1
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa25 f50c 	lsr.w	r5, r5, ip
 8000390:	431c      	orrs	r4, r3
 8000392:	0c23      	lsrs	r3, r4, #16
 8000394:	fbb5 f9fe 	udiv	r9, r5, lr
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	fb0e 5519 	mls	r5, lr, r9, r5
 80003a0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80003a4:	fb09 fa08 	mul.w	sl, r9, r8
 80003a8:	45aa      	cmp	sl, r5
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f301 	lsl.w	r3, r0, r1
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x21e>
 80003b4:	197d      	adds	r5, r7, r5
 80003b6:	f109 30ff 	add.w	r0, r9, #4294967295
 80003ba:	d247      	bcs.n	800044c <__udivmoddi4+0x2a4>
 80003bc:	45aa      	cmp	sl, r5
 80003be:	d945      	bls.n	800044c <__udivmoddi4+0x2a4>
 80003c0:	f1a9 0902 	sub.w	r9, r9, #2
 80003c4:	443d      	add	r5, r7
 80003c6:	eba5 050a 	sub.w	r5, r5, sl
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb5 f0fe 	udiv	r0, r5, lr
 80003d0:	fb0e 5510 	mls	r5, lr, r0, r5
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb00 f808 	mul.w	r8, r0, r8
 80003dc:	45a0      	cmp	r8, r4
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x248>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f100 35ff 	add.w	r5, r0, #4294967295
 80003e6:	d22d      	bcs.n	8000444 <__udivmoddi4+0x29c>
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d92b      	bls.n	8000444 <__udivmoddi4+0x29c>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f4:	eba4 0408 	sub.w	r4, r4, r8
 80003f8:	fba0 8902 	umull	r8, r9, r0, r2
 80003fc:	454c      	cmp	r4, r9
 80003fe:	46c6      	mov	lr, r8
 8000400:	464d      	mov	r5, r9
 8000402:	d319      	bcc.n	8000438 <__udivmoddi4+0x290>
 8000404:	d016      	beq.n	8000434 <__udivmoddi4+0x28c>
 8000406:	b15e      	cbz	r6, 8000420 <__udivmoddi4+0x278>
 8000408:	ebb3 020e 	subs.w	r2, r3, lr
 800040c:	eb64 0405 	sbc.w	r4, r4, r5
 8000410:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000414:	40ca      	lsrs	r2, r1
 8000416:	ea4c 0202 	orr.w	r2, ip, r2
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c6 2400 	strd	r2, r4, [r6]
 8000420:	2100      	movs	r1, #0
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e70e      	b.n	800024a <__udivmoddi4+0xa2>
 800042c:	46ac      	mov	ip, r5
 800042e:	e6ed      	b.n	800020c <__udivmoddi4+0x64>
 8000430:	4618      	mov	r0, r3
 8000432:	e701      	b.n	8000238 <__udivmoddi4+0x90>
 8000434:	4543      	cmp	r3, r8
 8000436:	d2e6      	bcs.n	8000406 <__udivmoddi4+0x25e>
 8000438:	ebb8 0e02 	subs.w	lr, r8, r2
 800043c:	eb69 0507 	sbc.w	r5, r9, r7
 8000440:	3801      	subs	r0, #1
 8000442:	e7e0      	b.n	8000406 <__udivmoddi4+0x25e>
 8000444:	4628      	mov	r0, r5
 8000446:	e7d3      	b.n	80003f0 <__udivmoddi4+0x248>
 8000448:	4660      	mov	r0, ip
 800044a:	e78f      	b.n	800036c <__udivmoddi4+0x1c4>
 800044c:	4681      	mov	r9, r0
 800044e:	e7ba      	b.n	80003c6 <__udivmoddi4+0x21e>
 8000450:	4661      	mov	r1, ip
 8000452:	e777      	b.n	8000344 <__udivmoddi4+0x19c>
 8000454:	4608      	mov	r0, r1
 8000456:	e74b      	b.n	80002f0 <__udivmoddi4+0x148>
 8000458:	f1ac 0c02 	sub.w	ip, ip, #2
 800045c:	443d      	add	r5, r7
 800045e:	e715      	b.n	800028c <__udivmoddi4+0xe4>
 8000460:	3802      	subs	r0, #2
 8000462:	443c      	add	r4, r7
 8000464:	e726      	b.n	80002b4 <__udivmoddi4+0x10c>
 8000466:	bf00      	nop

08000468 <__aeabi_idiv0>:
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop

0800046c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000488:	f023 0218 	bic.w	r2, r3, #24
 800048c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr

080004a2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b085      	sub	sp, #20
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4313      	orrs	r3, r2
 80004b8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4013      	ands	r3, r2
 80004c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c6:	68fb      	ldr	r3, [r7, #12]
}
 80004c8:	bf00      	nop
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
	...

080004d4 <buffer_was_rein>:
	uint8_t data[buffergroesse];
	uint8_t next;
	uint8_t last;
} fifo_buffer = {{}, 0, 0};

int buffer_was_rein(uint8_t status){
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
	// wenn der nächste speicherplatz nicht leer ist, dann wird auch nichts reingebuffert
	if (fifo_buffer.data[fifo_buffer.next])	return 0;
 80004de:	4b14      	ldr	r3, [pc, #80]	; (8000530 <buffer_was_rein+0x5c>)
 80004e0:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80004e4:	461a      	mov	r2, r3
 80004e6:	4b12      	ldr	r3, [pc, #72]	; (8000530 <buffer_was_rein+0x5c>)
 80004e8:	5c9b      	ldrb	r3, [r3, r2]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <buffer_was_rein+0x1e>
 80004ee:	2300      	movs	r3, #0
 80004f0:	e018      	b.n	8000524 <buffer_was_rein+0x50>
	// wir haben freien speicher, also wird was reingebuffert.


	fifo_buffer.data[fifo_buffer.next]=status;
 80004f2:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <buffer_was_rein+0x5c>)
 80004f4:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80004f8:	4619      	mov	r1, r3
 80004fa:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <buffer_was_rein+0x5c>)
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	5453      	strb	r3, [r2, r1]

	// wenn fifo_buffer.next nicht die buffergröße sprengt, dann um 1 erhöhen
	fifo_buffer.next++;
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <buffer_was_rein+0x5c>)
 8000502:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8000506:	3301      	adds	r3, #1
 8000508:	b2da      	uxtb	r2, r3
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <buffer_was_rein+0x5c>)
 800050c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	// wenn doch, fifo_buffer.next=0;
	if(fifo_buffer.next>=buffergroesse)fifo_buffer.next=0;
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <buffer_was_rein+0x5c>)
 8000512:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8000516:	2b62      	cmp	r3, #98	; 0x62
 8000518:	d903      	bls.n	8000522 <buffer_was_rein+0x4e>
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <buffer_was_rein+0x5c>)
 800051c:	2200      	movs	r2, #0
 800051e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	return 1;
 8000522:	2301      	movs	r3, #1
}
 8000524:	4618      	mov	r0, r3
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000028 	.word	0x20000028

08000534 <buffer_was_raus>:

int buffer_was_raus(){
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
	int save_it;
	// wenn der letzte Speicherpunkt leer ist, dann wird auch nichts rausgebuffert.
    if (fifo_buffer.data[fifo_buffer.last]==0) return 0;
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <buffer_was_raus+0x64>)
 800053c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000540:	461a      	mov	r2, r3
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <buffer_was_raus+0x64>)
 8000544:	5c9b      	ldrb	r3, [r3, r2]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d101      	bne.n	800054e <buffer_was_raus+0x1a>
 800054a:	2300      	movs	r3, #0
 800054c:	e01f      	b.n	800058e <buffer_was_raus+0x5a>

	save_it=fifo_buffer.data[fifo_buffer.last];
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <buffer_was_raus+0x64>)
 8000550:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000554:	461a      	mov	r2, r3
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <buffer_was_raus+0x64>)
 8000558:	5c9b      	ldrb	r3, [r3, r2]
 800055a:	607b      	str	r3, [r7, #4]
	fifo_buffer.data[fifo_buffer.last]=0;
 800055c:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <buffer_was_raus+0x64>)
 800055e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000562:	461a      	mov	r2, r3
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <buffer_was_raus+0x64>)
 8000566:	2100      	movs	r1, #0
 8000568:	5499      	strb	r1, [r3, r2]
	fifo_buffer.last++;
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <buffer_was_raus+0x64>)
 800056c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000570:	3301      	adds	r3, #1
 8000572:	b2da      	uxtb	r2, r3
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <buffer_was_raus+0x64>)
 8000576:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	if (fifo_buffer.last>=buffergroesse) fifo_buffer.last=0;
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <buffer_was_raus+0x64>)
 800057c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000580:	2b62      	cmp	r3, #98	; 0x62
 8000582:	d903      	bls.n	800058c <buffer_was_raus+0x58>
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <buffer_was_raus+0x64>)
 8000586:	2200      	movs	r2, #0
 8000588:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	return save_it;
 800058c:	687b      	ldr	r3, [r7, #4]
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	20000028 	.word	0x20000028

0800059c <shine_green>:

// Shine_ lässt die LEDs der Controllers leuchten######################################
void shine_green(int power){
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, power); // LED1 an oder aus
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	461a      	mov	r2, r3
 80005aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ae:	4803      	ldr	r0, [pc, #12]	; (80005bc <shine_green+0x20>)
 80005b0:	f000 fef8 	bl	80013a4 <HAL_GPIO_WritePin>

}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	48000400 	.word	0x48000400

080005c0 <shine_blue>:

void shine_blue(int power){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, power); // LED2 an oder aus
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	461a      	mov	r2, r3
 80005ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d2:	4803      	ldr	r0, [pc, #12]	; (80005e0 <shine_blue+0x20>)
 80005d4:	f000 fee6 	bl	80013a4 <HAL_GPIO_WritePin>

}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	48000400 	.word	0x48000400

080005e4 <shine_red>:

void shine_red(int power){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, power); //LED3 an oder aus
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	461a      	mov	r2, r3
 80005f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <shine_red+0x20>)
 80005f8:	f000 fed4 	bl	80013a4 <HAL_GPIO_WritePin>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	48000400 	.word	0x48000400

08000608 <shine_all_leds>:

void shine_all_leds(int power){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	shine_red(power);		// alle LEDs an oder aus
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff ffe7 	bl	80005e4 <shine_red>
	shine_blue(power);
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f7ff ffd2 	bl	80005c0 <shine_blue>
	shine_green(power);
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f7ff ffbd 	bl	800059c <shine_green>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <idle_lauflicht>:

//########################################################################################

// Lauflichtfunktion
void idle_lauflicht(){
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
	int seconds=HAL_GetTick();
 8000632:	f000 fb67 	bl	8000d04 <HAL_GetTick>
 8000636:	4603      	mov	r3, r0
 8000638:	607b      	str	r3, [r7, #4]
	seconds/=1000;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a19      	ldr	r2, [pc, #100]	; (80006a4 <idle_lauflicht+0x78>)
 800063e:	fb82 1203 	smull	r1, r2, r2, r3
 8000642:	1192      	asrs	r2, r2, #6
 8000644:	17db      	asrs	r3, r3, #31
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	607b      	str	r3, [r7, #4]
	seconds%=4;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	425a      	negs	r2, r3
 800064e:	f003 0303 	and.w	r3, r3, #3
 8000652:	f002 0203 	and.w	r2, r2, #3
 8000656:	bf58      	it	pl
 8000658:	4253      	negpl	r3, r2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b03      	cmp	r3, #3
 8000660:	d81a      	bhi.n	8000698 <idle_lauflicht+0x6c>
 8000662:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <idle_lauflicht+0x3c>)
 8000664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000668:	08000679 	.word	0x08000679
 800066c:	08000681 	.word	0x08000681
 8000670:	08000689 	.word	0x08000689
 8000674:	08000691 	.word	0x08000691

	switch(seconds){
		case 0:
			shine_blue(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f7ff ffa1 	bl	80005c0 <shine_blue>
			break;
 800067e:	e00c      	b.n	800069a <idle_lauflicht+0x6e>
		case 1:
			shine_green(1);
 8000680:	2001      	movs	r0, #1
 8000682:	f7ff ff8b 	bl	800059c <shine_green>
			break;
 8000686:	e008      	b.n	800069a <idle_lauflicht+0x6e>
		case 2:
			shine_red(1);
 8000688:	2001      	movs	r0, #1
 800068a:	f7ff ffab 	bl	80005e4 <shine_red>
			break;
 800068e:	e004      	b.n	800069a <idle_lauflicht+0x6e>
		case 3:
			shine_green(1);
 8000690:	2001      	movs	r0, #1
 8000692:	f7ff ff83 	bl	800059c <shine_green>
			break;
 8000696:	e000      	b.n	800069a <idle_lauflicht+0x6e>
		default:
			break;
 8000698:	bf00      	nop
	}
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	10624dd3 	.word	0x10624dd3

080006a8 <interrupt_for_blue>:

#define interrupt_flash 	50 		// wie schnell flackert die LED nach einem Interrupt
#define interrupt_time  	1000	// wie lange flackert um einen Interreupt anzuzeigen


void interrupt_for_blue(int time){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	int now=HAL_GetTick();
 80006b0:	f000 fb28 	bl	8000d04 <HAL_GetTick>
 80006b4:	4603      	mov	r3, r0
 80006b6:	60fb      	str	r3, [r7, #12]
		now+=time;
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	60fb      	str	r3, [r7, #12]
		while((now-HAL_GetTick())>0){
 80006c0:	e00b      	b.n	80006da <interrupt_for_blue+0x32>
			shine_blue((HAL_GetTick()/interrupt_flash)%2);
 80006c2:	f000 fb1f 	bl	8000d04 <HAL_GetTick>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <interrupt_for_blue+0x48>)
 80006ca:	fba2 2303 	umull	r2, r3, r2, r3
 80006ce:	091b      	lsrs	r3, r3, #4
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff73 	bl	80005c0 <shine_blue>
		while((now-HAL_GetTick())>0){
 80006da:	f000 fb13 	bl	8000d04 <HAL_GetTick>
 80006de:	4602      	mov	r2, r0
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d1ed      	bne.n	80006c2 <interrupt_for_blue+0x1a>
		}
}
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	51eb851f 	.word	0x51eb851f

080006f4 <interrupt_for_green>:

void interrupt_for_green(int time){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	int now=HAL_GetTick();
 80006fc:	f000 fb02 	bl	8000d04 <HAL_GetTick>
 8000700:	4603      	mov	r3, r0
 8000702:	60fb      	str	r3, [r7, #12]
		now+=time;
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	60fb      	str	r3, [r7, #12]
		while((now-HAL_GetTick())>0){
 800070c:	e00b      	b.n	8000726 <interrupt_for_green+0x32>
			shine_green((HAL_GetTick()/interrupt_flash)%2);
 800070e:	f000 faf9 	bl	8000d04 <HAL_GetTick>
 8000712:	4603      	mov	r3, r0
 8000714:	4a09      	ldr	r2, [pc, #36]	; (800073c <interrupt_for_green+0x48>)
 8000716:	fba2 2303 	umull	r2, r3, r2, r3
 800071a:	091b      	lsrs	r3, r3, #4
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff3b 	bl	800059c <shine_green>
		while((now-HAL_GetTick())>0){
 8000726:	f000 faed 	bl	8000d04 <HAL_GetTick>
 800072a:	4602      	mov	r2, r0
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	429a      	cmp	r2, r3
 8000730:	d1ed      	bne.n	800070e <interrupt_for_green+0x1a>
		}
}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	51eb851f 	.word	0x51eb851f

08000740 <interrupt_for_red>:

void interrupt_for_red(int time){
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	int now=HAL_GetTick();
 8000748:	f000 fadc 	bl	8000d04 <HAL_GetTick>
 800074c:	4603      	mov	r3, r0
 800074e:	60fb      	str	r3, [r7, #12]
		now+=time;
 8000750:	68fa      	ldr	r2, [r7, #12]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4413      	add	r3, r2
 8000756:	60fb      	str	r3, [r7, #12]
		while((now-HAL_GetTick())>0){
 8000758:	e00b      	b.n	8000772 <interrupt_for_red+0x32>
			shine_red((HAL_GetTick()/interrupt_flash)%2);
 800075a:	f000 fad3 	bl	8000d04 <HAL_GetTick>
 800075e:	4603      	mov	r3, r0
 8000760:	4a09      	ldr	r2, [pc, #36]	; (8000788 <interrupt_for_red+0x48>)
 8000762:	fba2 2303 	umull	r2, r3, r2, r3
 8000766:	091b      	lsrs	r3, r3, #4
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff39 	bl	80005e4 <shine_red>
		while((now-HAL_GetTick())>0){
 8000772:	f000 fac7 	bl	8000d04 <HAL_GetTick>
 8000776:	4602      	mov	r2, r0
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	429a      	cmp	r2, r3
 800077c:	d1ed      	bne.n	800075a <interrupt_for_red+0x1a>
		}
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	51eb851f 	.word	0x51eb851f

0800078c <run_lora_run>:
void run_lora_run(){
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	shine_all_leds(0);
 8000790:	2000      	movs	r0, #0
 8000792:	f7ff ff39 	bl	8000608 <shine_all_leds>

		switch (buffer_was_raus()){
 8000796:	f7ff fecd 	bl	8000534 <buffer_was_raus>
 800079a:	4603      	mov	r3, r0
 800079c:	2b40      	cmp	r3, #64	; 0x40
 800079e:	d013      	beq.n	80007c8 <run_lora_run+0x3c>
 80007a0:	2b40      	cmp	r3, #64	; 0x40
 80007a2:	dc19      	bgt.n	80007d8 <run_lora_run+0x4c>
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	d00a      	beq.n	80007be <run_lora_run+0x32>
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	dc15      	bgt.n	80007d8 <run_lora_run+0x4c>
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d010      	beq.n	80007d2 <run_lora_run+0x46>
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d111      	bne.n	80007d8 <run_lora_run+0x4c>
			case b1_interrupt_Pin:
				interrupt_for_blue(interrupt_time);
 80007b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b8:	f7ff ff76 	bl	80006a8 <interrupt_for_blue>
				break;
 80007bc:	e00d      	b.n	80007da <run_lora_run+0x4e>
			case b2_interrupt_Pin:
				interrupt_for_green(interrupt_time);
 80007be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c2:	f7ff ff97 	bl	80006f4 <interrupt_for_green>
				break;
 80007c6:	e008      	b.n	80007da <run_lora_run+0x4e>
			case b3_interrupt_Pin:
				interrupt_for_red(interrupt_time);
 80007c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007cc:	f7ff ffb8 	bl	8000740 <interrupt_for_red>
				break;
 80007d0:	e003      	b.n	80007da <run_lora_run+0x4e>
			case 0:
				// signs of life
				idle_lauflicht();
 80007d2:	f7ff ff2b 	bl	800062c <idle_lauflicht>
				break;
 80007d6:	e000      	b.n	80007da <run_lora_run+0x4e>
			default:
				break;
 80007d8:	bf00      	nop
		}

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}

080007de <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e2:	f000 fa23 	bl	8000c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e6:	f000 f819 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ea:	f000 f8cd 	bl	8000988 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007ee:	f000 f87f 	bl	80008f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80007f2:	2001      	movs	r0, #1
 80007f4:	f000 fe46 	bl	8001484 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  run_lora_run();
 80007f8:	f7ff ffc8 	bl	800078c <run_lora_run>
 80007fc:	e7fc      	b.n	80007f8 <main+0x1a>

080007fe <HAL_GPIO_EXTI_Callback>:
  }
  /* USER CODE END 3 */
}


void  HAL_GPIO_EXTI_Callback(uint16_t Knopp) {
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	80fb      	strh	r3, [r7, #6]

	buffer_was_rein(Knopp);
 8000808:	88fb      	ldrh	r3, [r7, #6]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fe61 	bl	80004d4 <buffer_was_rein>

}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b09a      	sub	sp, #104	; 0x68
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	2248      	movs	r2, #72	; 0x48
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f003 fd2a 	bl	8004284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
 800083e:	615a      	str	r2, [r3, #20]
 8000840:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000842:	f000 fdf7 	bl	8001434 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000846:	2000      	movs	r0, #0
 8000848:	f7ff fe16 	bl	8000478 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	4b27      	ldr	r3, [pc, #156]	; (80008ec <SystemClock_Config+0xd0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000854:	4a25      	ldr	r2, [pc, #148]	; (80008ec <SystemClock_Config+0xd0>)
 8000856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b23      	ldr	r3, [pc, #140]	; (80008ec <SystemClock_Config+0xd0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000868:	2324      	movs	r3, #36	; 0x24
 800086a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800086c:	2381      	movs	r3, #129	; 0x81
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000870:	2301      	movs	r3, #1
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000874:	2300      	movs	r3, #0
 8000876:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000878:	2360      	movs	r3, #96	; 0x60
 800087a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087c:	2302      	movs	r3, #2
 800087e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000880:	2301      	movs	r3, #1
 8000882:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000888:	2319      	movs	r3, #25
 800088a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000890:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV5;
 8000892:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000896:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000898:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800089c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 f8ba 	bl	8001a1c <HAL_RCC_OscConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008ae:	f000 f8cb 	bl	8000a48 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 80008b2:	236f      	movs	r3, #111	; 0x6f
 80008b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	2303      	movs	r3, #3
 80008b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80008c6:	2380      	movs	r3, #128	; 0x80
 80008c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2101      	movs	r1, #1
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 fd98 	bl	8002408 <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008de:	f000 f8b3 	bl	8000a48 <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3768      	adds	r7, #104	; 0x68
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	58000400 	.word	0x58000400

080008f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f4:	4b22      	ldr	r3, [pc, #136]	; (8000980 <MX_USART2_UART_Init+0x90>)
 80008f6:	4a23      	ldr	r2, [pc, #140]	; (8000984 <MX_USART2_UART_Init+0x94>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <MX_USART2_UART_Init+0x90>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <MX_USART2_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <MX_USART2_UART_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <MX_USART2_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_USART2_UART_Init+0x90>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <MX_USART2_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_USART2_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <MX_USART2_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_USART2_UART_Init+0x90>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_USART2_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000938:	4811      	ldr	r0, [pc, #68]	; (8000980 <MX_USART2_UART_Init+0x90>)
 800093a:	f002 fceb 	bl	8003314 <HAL_UART_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000944:	f000 f880 	bl	8000a48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000948:	2100      	movs	r1, #0
 800094a:	480d      	ldr	r0, [pc, #52]	; (8000980 <MX_USART2_UART_Init+0x90>)
 800094c:	f003 fb3e 	bl	8003fcc <HAL_UARTEx_SetTxFifoThreshold>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000956:	f000 f877 	bl	8000a48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	4808      	ldr	r0, [pc, #32]	; (8000980 <MX_USART2_UART_Init+0x90>)
 800095e:	f003 fbab 	bl	80040b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000968:	f000 f86e 	bl	8000a48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <MX_USART2_UART_Init+0x90>)
 800096e:	f003 fad9 	bl	8003f24 <HAL_UARTEx_DisableFifoMode>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000978:	f000 f866 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000090 	.word	0x20000090
 8000984:	40004400 	.word	0x40004400

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	2001      	movs	r0, #1
 800099e:	f7ff fd80 	bl	80004a2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2002      	movs	r0, #2
 80009a4:	f7ff fd7d 	bl	80004a2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a8:	2004      	movs	r0, #4
 80009aa:	f7ff fd7a 	bl	80004a2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 80009b4:	4822      	ldr	r0, [pc, #136]	; (8000a40 <MX_GPIO_Init+0xb8>)
 80009b6:	f000 fcf5 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80009ba:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80009be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	4619      	mov	r1, r3
 80009d0:	481b      	ldr	r0, [pc, #108]	; (8000a40 <MX_GPIO_Init+0xb8>)
 80009d2:	f000 fadb 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : b1_interrupt_Pin b2_interrupt_Pin */
  GPIO_InitStruct.Pin = b1_interrupt_Pin|b2_interrupt_Pin;
 80009d6:	2303      	movs	r3, #3
 80009d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	4619      	mov	r1, r3
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ec:	f000 face 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : b3_interrupt_Pin */
  GPIO_InitStruct.Pin = b3_interrupt_Pin;
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(b3_interrupt_GPIO_Port, &GPIO_InitStruct);
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	4619      	mov	r1, r3
 8000a02:	4810      	ldr	r0, [pc, #64]	; (8000a44 <MX_GPIO_Init+0xbc>)
 8000a04:	f000 fac2 	bl	8000f8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2006      	movs	r0, #6
 8000a0e:	f000 fa6f 	bl	8000ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a12:	2006      	movs	r0, #6
 8000a14:	f000 fa96 	bl	8000f44 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2007      	movs	r0, #7
 8000a1e:	f000 fa67 	bl	8000ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a22:	2007      	movs	r0, #7
 8000a24:	f000 fa8e 	bl	8000f44 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2016      	movs	r0, #22
 8000a2e:	f000 fa5f 	bl	8000ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a32:	2016      	movs	r0, #22
 8000a34:	f000 fa86 	bl	8000f44 <HAL_NVIC_EnableIRQ>

}
 8000a38:	bf00      	nop
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	48000400 	.word	0x48000400
 8000a44:	48000800 	.word	0x48000800

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>

08000a52 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
 8000a5a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <LL_AHB2_GRP1_EnableClock>:
{
 8000a66:	b480      	push	{r7}
 8000a68:	b085      	sub	sp, #20
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4013      	ands	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr

08000a96 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b085      	sub	sp, #20
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000aa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aba:	68fb      	ldr	r3, [r7, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr

08000ac6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aca:	2007      	movs	r0, #7
 8000acc:	f000 f9f0 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b096      	sub	sp, #88	; 0x58
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	2238      	movs	r2, #56	; 0x38
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 fbc5 	bl	8004284 <memset>
  if(huart->Instance==USART2)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a17      	ldr	r2, [pc, #92]	; (8000b5c <HAL_UART_MspInit+0x88>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d126      	bne.n	8000b52 <HAL_UART_MspInit+0x7e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b08:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000b0c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 f964 	bl	8002de0 <HAL_RCCEx_PeriphCLKConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b1e:	f7ff ff93 	bl	8000a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b22:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b26:	f7ff ffb6 	bl	8000a96 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f7ff ff9b 	bl	8000a66 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000b30:	230c      	movs	r3, #12
 8000b32:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b40:	2307      	movs	r3, #7
 8000b42:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f000 fa1d 	bl	8000f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	3758      	adds	r7, #88	; 0x58
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40004400 	.word	0x40004400

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr

08000b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr

08000b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba6:	f000 f89b 	bl	8000ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}

08000bae <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(b1_interrupt_Pin);
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f000 fc26 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(b2_interrupt_Pin);
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f000 fc1f 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(b3_interrupt_Pin);
 8000bce:	2040      	movs	r0, #64	; 0x40
 8000bd0:	f000 fc18 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bd8:	480d      	ldr	r0, [pc, #52]	; (8000c10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bdc:	f7ff fc46 	bl	800046c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be2:	490d      	ldr	r1, [pc, #52]	; (8000c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <LoopForever+0xe>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf8:	4c0a      	ldr	r4, [pc, #40]	; (8000c24 <LoopForever+0x16>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c06:	f003 fb19 	bl	800423c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c0a:	f7ff fde8 	bl	80007de <main>

08000c0e <LoopForever>:

LoopForever:
    b LoopForever
 8000c0e:	e7fe      	b.n	8000c0e <LoopForever>
  ldr   r0, =_estack
 8000c10:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c1c:	080046dc 	.word	0x080046dc
  ldr r2, =_sbss
 8000c20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c24:	20000124 	.word	0x20000124

08000c28 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC_IRQHandler>
	...

08000c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c36:	2003      	movs	r0, #3
 8000c38:	f000 f93a 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000c3c:	f001 feee 	bl	8002a1c <HAL_RCC_GetHCLKFreq>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4a09      	ldr	r2, [pc, #36]	; (8000c68 <HAL_Init+0x3c>)
 8000c44:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c46:	200f      	movs	r0, #15
 8000c48:	f000 f810 	bl	8000c6c <HAL_InitTick>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	71fb      	strb	r3, [r7, #7]
 8000c56:	e001      	b.n	8000c5c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c58:	f7ff ff35 	bl	8000ac6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000000 	.word	0x20000000

08000c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <HAL_InitTick+0x6c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d024      	beq.n	8000cca <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c80:	f001 fecc 	bl	8002a1c <HAL_RCC_GetHCLKFreq>
 8000c84:	4602      	mov	r2, r0
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <HAL_InitTick+0x6c>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c90:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f96b 	bl	8000f74 <HAL_SYSTICK_Config>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10f      	bne.n	8000cc4 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b0f      	cmp	r3, #15
 8000ca8:	d809      	bhi.n	8000cbe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000caa:	2200      	movs	r2, #0
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb2:	f000 f91d 	bl	8000ef0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <HAL_InitTick+0x70>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	e007      	b.n	8000cce <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	e004      	b.n	8000cce <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	73fb      	strb	r3, [r7, #15]
 8000cc8:	e001      	b.n	8000cce <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x1c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_IncTick+0x20>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <HAL_IncTick+0x20>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000120 	.word	0x20000120

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b02      	ldr	r3, [pc, #8]	; (8000d14 <HAL_GetTick+0x10>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	20000120 	.word	0x20000120

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4906      	ldr	r1, [pc, #24]	; (8000db0 <__NVIC_EnableIRQ+0x34>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	; (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	; (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e7c:	d301      	bcc.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00f      	b.n	8000ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <SysTick_Config+0x40>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f7ff ff90 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <SysTick_Config+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	; (8000eac <SysTick_Config+0x40>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b07      	cmp	r3, #7
 8000ebc:	d00f      	beq.n	8000ede <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b06      	cmp	r3, #6
 8000ec2:	d00c      	beq.n	8000ede <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b05      	cmp	r3, #5
 8000ec8:	d009      	beq.n	8000ede <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	d006      	beq.n	8000ede <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d003      	beq.n	8000ede <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ed6:	21bb      	movs	r1, #187	; 0xbb
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000eda:	f7ff fdba 	bl	8000a52 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ff1a 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	080042ac 	.word	0x080042ac

08000ef0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d903      	bls.n	8000f0c <HAL_NVIC_SetPriority+0x1c>
 8000f04:	21d4      	movs	r1, #212	; 0xd4
 8000f06:	480e      	ldr	r0, [pc, #56]	; (8000f40 <HAL_NVIC_SetPriority+0x50>)
 8000f08:	f7ff fda3 	bl	8000a52 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b0f      	cmp	r3, #15
 8000f10:	d903      	bls.n	8000f1a <HAL_NVIC_SetPriority+0x2a>
 8000f12:	21d5      	movs	r1, #213	; 0xd5
 8000f14:	480a      	ldr	r0, [pc, #40]	; (8000f40 <HAL_NVIC_SetPriority+0x50>)
 8000f16:	f7ff fd9c 	bl	8000a52 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1a:	f7ff ff21 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000f1e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	68b9      	ldr	r1, [r7, #8]
 8000f24:	6978      	ldr	r0, [r7, #20]
 8000f26:	f7ff ff6f 	bl	8000e08 <NVIC_EncodePriority>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff3e 	bl	8000db4 <__NVIC_SetPriority>
}
 8000f38:	bf00      	nop
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	080042ac 	.word	0x080042ac

08000f44 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	da03      	bge.n	8000f5e <HAL_NVIC_EnableIRQ+0x1a>
 8000f56:	21ea      	movs	r1, #234	; 0xea
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <HAL_NVIC_EnableIRQ+0x2c>)
 8000f5a:	f7ff fd7a 	bl	8000a52 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff0a 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	080042ac 	.word	0x080042ac

08000f74 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff75 	bl	8000e6c <SysTick_Config>
 8000f82:	4603      	mov	r3, r0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fa0:	d00f      	beq.n	8000fc2 <HAL_GPIO_Init+0x36>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a35      	ldr	r2, [pc, #212]	; (800107c <HAL_GPIO_Init+0xf0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d00b      	beq.n	8000fc2 <HAL_GPIO_Init+0x36>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a34      	ldr	r2, [pc, #208]	; (8001080 <HAL_GPIO_Init+0xf4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d007      	beq.n	8000fc2 <HAL_GPIO_Init+0x36>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a33      	ldr	r2, [pc, #204]	; (8001084 <HAL_GPIO_Init+0xf8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x36>
 8000fba:	21a3      	movs	r1, #163	; 0xa3
 8000fbc:	4832      	ldr	r0, [pc, #200]	; (8001088 <HAL_GPIO_Init+0xfc>)
 8000fbe:	f7ff fd48 	bl	8000a52 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d005      	beq.n	8000fd8 <HAL_GPIO_Init+0x4c>
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	0c1b      	lsrs	r3, r3, #16
 8000fd2:	041b      	lsls	r3, r3, #16
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x54>
 8000fd8:	21a4      	movs	r1, #164	; 0xa4
 8000fda:	482b      	ldr	r0, [pc, #172]	; (8001088 <HAL_GPIO_Init+0xfc>)
 8000fdc:	f7ff fd39 	bl	8000a52 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d035      	beq.n	8001054 <HAL_GPIO_Init+0xc8>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d031      	beq.n	8001054 <HAL_GPIO_Init+0xc8>
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b11      	cmp	r3, #17
 8000ff6:	d02d      	beq.n	8001054 <HAL_GPIO_Init+0xc8>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d029      	beq.n	8001054 <HAL_GPIO_Init+0xc8>
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b12      	cmp	r3, #18
 8001006:	d025      	beq.n	8001054 <HAL_GPIO_Init+0xc8>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001010:	d020      	beq.n	8001054 <HAL_GPIO_Init+0xc8>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800101a:	d01b      	beq.n	8001054 <HAL_GPIO_Init+0xc8>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001024:	d016      	beq.n	8001054 <HAL_GPIO_Init+0xc8>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800102e:	d011      	beq.n	8001054 <HAL_GPIO_Init+0xc8>
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001038:	d00c      	beq.n	8001054 <HAL_GPIO_Init+0xc8>
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001042:	d007      	beq.n	8001054 <HAL_GPIO_Init+0xc8>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b03      	cmp	r3, #3
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0xc8>
 800104c:	21a5      	movs	r1, #165	; 0xa5
 800104e:	480e      	ldr	r0, [pc, #56]	; (8001088 <HAL_GPIO_Init+0xfc>)
 8001050:	f7ff fcff 	bl	8000a52 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 8192 	beq.w	8001382 <HAL_GPIO_Init+0x3f6>
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	2b01      	cmp	r3, #1
 8001064:	f000 818d 	beq.w	8001382 <HAL_GPIO_Init+0x3f6>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	2b02      	cmp	r3, #2
 800106e:	f000 8188 	beq.w	8001382 <HAL_GPIO_Init+0x3f6>
 8001072:	21a6      	movs	r1, #166	; 0xa6
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <HAL_GPIO_Init+0xfc>)
 8001076:	f7ff fcec 	bl	8000a52 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107a:	e182      	b.n	8001382 <HAL_GPIO_Init+0x3f6>
 800107c:	48000400 	.word	0x48000400
 8001080:	48000800 	.word	0x48000800
 8001084:	48001c00 	.word	0x48001c00
 8001088:	08004324 	.word	0x08004324
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	2101      	movs	r1, #1
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	fa01 f303 	lsl.w	r3, r1, r3
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 816c 	beq.w	800137c <HAL_GPIO_Init+0x3f0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d005      	beq.n	80010bc <HAL_GPIO_Init+0x130>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d144      	bne.n	8001146 <HAL_GPIO_Init+0x1ba>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00f      	beq.n	80010e4 <HAL_GPIO_Init+0x158>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d00b      	beq.n	80010e4 <HAL_GPIO_Init+0x158>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d007      	beq.n	80010e4 <HAL_GPIO_Init+0x158>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x158>
 80010dc:	21b5      	movs	r1, #181	; 0xb5
 80010de:	486e      	ldr	r0, [pc, #440]	; (8001298 <HAL_GPIO_Init+0x30c>)
 80010e0:	f7ff fcb7 	bl	8000a52 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800111a:	2201      	movs	r2, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	091b      	lsrs	r3, r3, #4
 8001130:	f003 0201 	and.w	r2, r3, #1
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	2b03      	cmp	r3, #3
 8001150:	d017      	beq.n	8001182 <HAL_GPIO_Init+0x1f6>
      {
        temp = GPIOx->PUPDR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d13f      	bne.n	800120e <HAL_GPIO_Init+0x282>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001194:	d00f      	beq.n	80011b6 <HAL_GPIO_Init+0x22a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a40      	ldr	r2, [pc, #256]	; (800129c <HAL_GPIO_Init+0x310>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d00b      	beq.n	80011b6 <HAL_GPIO_Init+0x22a>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a3f      	ldr	r2, [pc, #252]	; (80012a0 <HAL_GPIO_Init+0x314>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x22a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a3e      	ldr	r2, [pc, #248]	; (80012a4 <HAL_GPIO_Init+0x318>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x22a>
 80011ae:	21d0      	movs	r1, #208	; 0xd0
 80011b0:	4839      	ldr	r0, [pc, #228]	; (8001298 <HAL_GPIO_Init+0x30c>)
 80011b2:	f7ff fc4e 	bl	8000a52 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d903      	bls.n	80011c6 <HAL_GPIO_Init+0x23a>
 80011be:	21d1      	movs	r1, #209	; 0xd1
 80011c0:	4835      	ldr	r0, [pc, #212]	; (8001298 <HAL_GPIO_Init+0x30c>)
 80011c2:	f7ff fc46 	bl	8000a52 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	6939      	ldr	r1, [r7, #16]
 800120a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0203 	and.w	r2, r3, #3
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 8096 	beq.w	800137c <HAL_GPIO_Init+0x3f0>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001250:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <HAL_GPIO_Init+0x31c>)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	089b      	lsrs	r3, r3, #2
 8001256:	3302      	adds	r3, #2
 8001258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	2207      	movs	r2, #7
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800127a:	d017      	beq.n	80012ac <HAL_GPIO_Init+0x320>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a07      	ldr	r2, [pc, #28]	; (800129c <HAL_GPIO_Init+0x310>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d007      	beq.n	8001294 <HAL_GPIO_Init+0x308>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <HAL_GPIO_Init+0x314>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d101      	bne.n	8001290 <HAL_GPIO_Init+0x304>
 800128c:	2302      	movs	r3, #2
 800128e:	e00e      	b.n	80012ae <HAL_GPIO_Init+0x322>
 8001290:	2307      	movs	r3, #7
 8001292:	e00c      	b.n	80012ae <HAL_GPIO_Init+0x322>
 8001294:	2301      	movs	r3, #1
 8001296:	e00a      	b.n	80012ae <HAL_GPIO_Init+0x322>
 8001298:	08004324 	.word	0x08004324
 800129c:	48000400 	.word	0x48000400
 80012a0:	48000800 	.word	0x48000800
 80012a4:	48001c00 	.word	0x48001c00
 80012a8:	40010000 	.word	0x40010000
 80012ac:	2300      	movs	r3, #0
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	f002 0203 	and.w	r2, r2, #3
 80012b4:	0092      	lsls	r2, r2, #2
 80012b6:	4093      	lsls	r3, r2
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012be:	4937      	ldr	r1, [pc, #220]	; (800139c <HAL_GPIO_Init+0x410>)
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	3302      	adds	r3, #2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80012cc:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <HAL_GPIO_Init+0x414>)
 80012ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012d2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x366>
        {
          temp |= iocurrent;
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80012f2:	4a2b      	ldr	r2, [pc, #172]	; (80013a0 <HAL_GPIO_Init+0x414>)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <HAL_GPIO_Init+0x414>)
 80012fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001300:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x394>
        {
          temp |= iocurrent;
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001320:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <HAL_GPIO_Init+0x414>)
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_GPIO_Init+0x414>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x3c0>
        {
          temp |= iocurrent;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <HAL_GPIO_Init+0x414>)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <HAL_GPIO_Init+0x414>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x3ea>
        {
          temp |= iocurrent;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <HAL_GPIO_Init+0x414>)
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	3301      	adds	r3, #1
 8001380:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa22 f303 	lsr.w	r3, r2, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	f47f ae7d 	bne.w	800108c <HAL_GPIO_Init+0x100>
  }
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40010000 	.word	0x40010000
 80013a0:	58000800 	.word	0x58000800

080013a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
 80013b0:	4613      	mov	r3, r2
 80013b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d004      	beq.n	80013c4 <HAL_GPIO_WritePin+0x20>
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	0c1b      	lsrs	r3, r3, #16
 80013be:	041b      	lsls	r3, r3, #16
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d004      	beq.n	80013ce <HAL_GPIO_WritePin+0x2a>
 80013c4:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80013c8:	480d      	ldr	r0, [pc, #52]	; (8001400 <HAL_GPIO_WritePin+0x5c>)
 80013ca:	f7ff fb42 	bl	8000a52 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80013ce:	787b      	ldrb	r3, [r7, #1]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d007      	beq.n	80013e4 <HAL_GPIO_WritePin+0x40>
 80013d4:	787b      	ldrb	r3, [r7, #1]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d004      	beq.n	80013e4 <HAL_GPIO_WritePin+0x40>
 80013da:	f240 11a5 	movw	r1, #421	; 0x1a5
 80013de:	4808      	ldr	r0, [pc, #32]	; (8001400 <HAL_GPIO_WritePin+0x5c>)
 80013e0:	f7ff fb37 	bl	8000a52 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80013e4:	787b      	ldrb	r3, [r7, #1]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ea:	887a      	ldrh	r2, [r7, #2]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013f0:	e002      	b.n	80013f8 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013f2:	887a      	ldrh	r2, [r7, #2]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	08004324 	.word	0x08004324

08001404 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	4013      	ands	r3, r2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d006      	beq.n	8001428 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f9eb 	bl	80007fe <HAL_GPIO_EXTI_Callback>
  }
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	58000800 	.word	0x58000800

08001434 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <HAL_PWR_EnableBkUpAccess+0x18>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a03      	ldr	r2, [pc, #12]	; (800144c <HAL_PWR_EnableBkUpAccess+0x18>)
 800143e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	58000400 	.word	0x58000400

08001450 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <LL_PWR_EnableBootC2+0x18>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <LL_PWR_EnableBootC2+0x18>)
 800145a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	58000400 	.word	0x58000400

0800146c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <HAL_PWREx_GetVoltageRange+0x14>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	58000400 	.word	0x58000400

08001484 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d004      	beq.n	800149c <HAL_PWREx_ReleaseCore+0x18>
 8001492:	f240 2121 	movw	r1, #545	; 0x221
 8001496:	4804      	ldr	r0, [pc, #16]	; (80014a8 <HAL_PWREx_ReleaseCore+0x24>)
 8001498:	f7ff fadb 	bl	8000a52 <assert_failed>

  LL_PWR_EnableBootC2();
 800149c:	f7ff ffd8 	bl	8001450 <LL_PWR_EnableBootC2>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	08004398 	.word	0x08004398

080014ac <LL_PWR_IsEnabledBkUpAccess>:
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014bc:	d101      	bne.n	80014c2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	58000400 	.word	0x58000400

080014d0 <LL_RCC_HSE_EnableTcxo>:
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80014d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <LL_RCC_HSE_DisableTcxo>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80014f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80014fe:	6013      	str	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800150c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800151a:	d101      	bne.n	8001520 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <LL_RCC_HSE_Enable>:
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800152e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153c:	6013      	str	r3, [r2, #0]
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr

08001546 <LL_RCC_HSE_Disable>:
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800154a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001558:	6013      	str	r3, [r2, #0]
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <LL_RCC_HSE_IsReady>:
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001570:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001574:	d101      	bne.n	800157a <LL_RCC_HSE_IsReady+0x18>
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <LL_RCC_HSE_IsReady+0x1a>
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <LL_RCC_HSI_Enable>:
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <LL_RCC_HSI_Disable>:
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80015a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <LL_RCC_HSI_IsReady>:
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80015c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ce:	d101      	bne.n	80015d4 <LL_RCC_HSI_IsReady+0x18>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <LL_RCC_HSI_IsReady+0x1a>
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr

080015de <LL_RCC_HSI_SetCalibTrimming>:
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80015e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	061b      	lsls	r3, r3, #24
 80015f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr

08001606 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800160a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b02      	cmp	r3, #2
 8001618:	d101      	bne.n	800161e <LL_RCC_LSE_IsReady+0x18>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <LL_RCC_LSE_IsReady+0x1a>
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800162c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001634:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800164c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800166c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b02      	cmp	r3, #2
 800167a:	d101      	bne.n	8001680 <LL_RCC_LSI_IsReady+0x18>
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <LL_RCC_LSI_IsReady+0x1a>
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr

0800168a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800168e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6013      	str	r3, [r2, #0]
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr

080016a6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80016aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6013      	str	r3, [r2, #0]
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80016c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d101      	bne.n	80016d8 <LL_RCC_MSI_IsReady+0x16>
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <LL_RCC_MSI_IsReady+0x18>
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80016e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d101      	bne.n	80016f8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800171c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001724:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f023 0203 	bic.w	r2, r3, #3
 800176a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4313      	orrs	r3, r2
 8001772:	608b      	str	r3, [r1, #8]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr

0800177e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800179c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	608b      	str	r3, [r1, #8]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80017c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80017ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017f4:	f023 020f 	bic.w	r2, r3, #15
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001800:	4313      	orrs	r3, r2
 8001802:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001822:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4313      	orrs	r3, r2
 800182a:	608b      	str	r3, [r1, #8]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800183e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001848:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80018a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80018bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80018d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80018f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001902:	d101      	bne.n	8001908 <LL_RCC_PLL_IsReady+0x18>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <LL_RCC_PLL_IsReady+0x1a>
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800192e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800195a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f003 0303 	and.w	r3, r3, #3
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197e:	d101      	bne.n	8001984 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr

0800198e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001996:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019a2:	d101      	bne.n	80019a8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80019b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c6:	d101      	bne.n	80019cc <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019e8:	d101      	bne.n	80019ee <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80019fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a0a:	d101      	bne.n	8001a10 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
	...

08001a1c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f000 bce3 	b.w	80023f6 <HAL_RCC_OscConfig+0x9da>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00a      	beq.n	8001a4e <HAL_RCC_OscConfig+0x32>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 032f 	bic.w	r3, r3, #47	; 0x2f
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <HAL_RCC_OscConfig+0x32>
 8001a44:	f240 1159 	movw	r1, #345	; 0x159
 8001a48:	48aa      	ldr	r0, [pc, #680]	; (8001cf4 <HAL_RCC_OscConfig+0x2d8>)
 8001a4a:	f7ff f802 	bl	8000a52 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a4e:	f7ff fe96 	bl	800177e <LL_RCC_GetSysClkSource>
 8001a52:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a54:	f7ff ff7f 	bl	8001956 <LL_RCC_PLL_GetMainSource>
 8001a58:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8117 	beq.w	8001c96 <HAL_RCC_OscConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_RCC_OscConfig+0x66>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d004      	beq.n	8001a82 <HAL_RCC_OscConfig+0x66>
 8001a78:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8001a7c:	489d      	ldr	r0, [pc, #628]	; (8001cf4 <HAL_RCC_OscConfig+0x2d8>)
 8001a7e:	f7fe ffe8 	bl	8000a52 <assert_failed>
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	2bff      	cmp	r3, #255	; 0xff
 8001a88:	d904      	bls.n	8001a94 <HAL_RCC_OscConfig+0x78>
 8001a8a:	f240 1163 	movw	r1, #355	; 0x163
 8001a8e:	4899      	ldr	r0, [pc, #612]	; (8001cf4 <HAL_RCC_OscConfig+0x2d8>)
 8001a90:	f7fe ffdf 	bl	8000a52 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d030      	beq.n	8001afe <HAL_RCC_OscConfig+0xe2>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	2b10      	cmp	r3, #16
 8001aa2:	d02c      	beq.n	8001afe <HAL_RCC_OscConfig+0xe2>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	2b20      	cmp	r3, #32
 8001aaa:	d028      	beq.n	8001afe <HAL_RCC_OscConfig+0xe2>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	2b30      	cmp	r3, #48	; 0x30
 8001ab2:	d024      	beq.n	8001afe <HAL_RCC_OscConfig+0xe2>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	2b40      	cmp	r3, #64	; 0x40
 8001aba:	d020      	beq.n	8001afe <HAL_RCC_OscConfig+0xe2>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	2b50      	cmp	r3, #80	; 0x50
 8001ac2:	d01c      	beq.n	8001afe <HAL_RCC_OscConfig+0xe2>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	2b60      	cmp	r3, #96	; 0x60
 8001aca:	d018      	beq.n	8001afe <HAL_RCC_OscConfig+0xe2>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	2b70      	cmp	r3, #112	; 0x70
 8001ad2:	d014      	beq.n	8001afe <HAL_RCC_OscConfig+0xe2>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	2b80      	cmp	r3, #128	; 0x80
 8001ada:	d010      	beq.n	8001afe <HAL_RCC_OscConfig+0xe2>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	2b90      	cmp	r3, #144	; 0x90
 8001ae2:	d00c      	beq.n	8001afe <HAL_RCC_OscConfig+0xe2>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	2ba0      	cmp	r3, #160	; 0xa0
 8001aea:	d008      	beq.n	8001afe <HAL_RCC_OscConfig+0xe2>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	2bb0      	cmp	r3, #176	; 0xb0
 8001af2:	d004      	beq.n	8001afe <HAL_RCC_OscConfig+0xe2>
 8001af4:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8001af8:	487e      	ldr	r0, [pc, #504]	; (8001cf4 <HAL_RCC_OscConfig+0x2d8>)
 8001afa:	f7fe ffaa 	bl	8000a52 <assert_failed>

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_OscConfig+0xf4>
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d17e      	bne.n	8001c08 <HAL_RCC_OscConfig+0x1ec>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d17b      	bne.n	8001c08 <HAL_RCC_OscConfig+0x1ec>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b10:	f7ff fdd7 	bl	80016c2 <LL_RCC_MSI_IsReady>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d006      	beq.n	8001b28 <HAL_RCC_OscConfig+0x10c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d102      	bne.n	8001b28 <HAL_RCC_OscConfig+0x10c>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	f000 bc67 	b.w	80023f6 <HAL_RCC_OscConfig+0x9da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d005      	beq.n	8001b46 <HAL_RCC_OscConfig+0x12a>
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b44:	e006      	b.n	8001b54 <HAL_RCC_OscConfig+0x138>
 8001b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4e:	091b      	lsrs	r3, r3, #4
 8001b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d223      	bcs.n	8001ba0 <HAL_RCC_OscConfig+0x184>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 ff95 	bl	8002a8c <RCC_SetFlashLatencyFromMSIRange>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <HAL_RCC_OscConfig+0x152>
          {
            return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f000 bc44 	b.w	80023f6 <HAL_RCC_OscConfig+0x9da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b78:	f043 0308 	orr.w	r3, r3, #8
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fdc9 	bl	8001730 <LL_RCC_MSI_SetCalibTrimming>
 8001b9e:	e022      	b.n	8001be6 <HAL_RCC_OscConfig+0x1ca>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001baa:	f043 0308 	orr.w	r3, r3, #8
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fdb0 	bl	8001730 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 ff59 	bl	8002a8c <RCC_SetFlashLatencyFromMSIRange>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <HAL_RCC_OscConfig+0x1ca>
          {
            return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	f000 bc08 	b.w	80023f6 <HAL_RCC_OscConfig+0x9da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001be6:	f000 ff19 	bl	8002a1c <HAL_RCC_GetHCLKFreq>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4a42      	ldr	r2, [pc, #264]	; (8001cf8 <HAL_RCC_OscConfig+0x2dc>)
 8001bee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bf0:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <HAL_RCC_OscConfig+0x2e0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff f839 	bl	8000c6c <HAL_InitTick>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001bfe:	7cfb      	ldrb	r3, [r7, #19]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d047      	beq.n	8001c94 <HAL_RCC_OscConfig+0x278>
        {
          return status;
 8001c04:	7cfb      	ldrb	r3, [r7, #19]
 8001c06:	e3f6      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d02c      	beq.n	8001c6a <HAL_RCC_OscConfig+0x24e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c10:	f7ff fd3b 	bl	800168a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c14:	f7ff f876 	bl	8000d04 <HAL_GetTick>
 8001c18:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x212>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c1c:	f7ff f872 	bl	8000d04 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x212>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e3e3      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c2e:	f7ff fd48 	bl	80016c2 <LL_RCC_MSI_IsReady>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f1      	beq.n	8001c1c <HAL_RCC_OscConfig+0x200>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c42:	f043 0308 	orr.w	r3, r3, #8
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fd64 	bl	8001730 <LL_RCC_MSI_SetCalibTrimming>
 8001c68:	e015      	b.n	8001c96 <HAL_RCC_OscConfig+0x27a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c6a:	f7ff fd1c 	bl	80016a6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff f849 	bl	8000d04 <HAL_GetTick>
 8001c72:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x26c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c76:	f7ff f845 	bl	8000d04 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e3b6      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c88:	f7ff fd1b 	bl	80016c2 <LL_RCC_MSI_IsReady>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f1      	bne.n	8001c76 <HAL_RCC_OscConfig+0x25a>
 8001c92:	e000      	b.n	8001c96 <HAL_RCC_OscConfig+0x27a>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c94:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8088 	beq.w	8001db4 <HAL_RCC_OscConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00e      	beq.n	8001cca <HAL_RCC_OscConfig+0x2ae>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb4:	d009      	beq.n	8001cca <HAL_RCC_OscConfig+0x2ae>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001cbe:	d004      	beq.n	8001cca <HAL_RCC_OscConfig+0x2ae>
 8001cc0:	f240 11cd 	movw	r1, #461	; 0x1cd
 8001cc4:	480b      	ldr	r0, [pc, #44]	; (8001cf4 <HAL_RCC_OscConfig+0x2d8>)
 8001cc6:	f7fe fec4 	bl	8000a52 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_OscConfig+0x2c0>
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d114      	bne.n	8001d00 <HAL_RCC_OscConfig+0x2e4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d111      	bne.n	8001d00 <HAL_RCC_OscConfig+0x2e4>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	f7ff fc41 	bl	8001562 <LL_RCC_HSE_IsReady>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d065      	beq.n	8001db2 <HAL_RCC_OscConfig+0x396>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d161      	bne.n	8001db2 <HAL_RCC_OscConfig+0x396>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e381      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
 8001cf2:	bf00      	nop
 8001cf4:	08004410 	.word	0x08004410
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000004 	.word	0x20000004
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d009      	beq.n	8001d1c <HAL_RCC_OscConfig+0x300>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d10:	d004      	beq.n	8001d1c <HAL_RCC_OscConfig+0x300>
 8001d12:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8001d16:	489f      	ldr	r0, [pc, #636]	; (8001f94 <HAL_RCC_OscConfig+0x578>)
 8001d18:	f7fe fe9b 	bl	8000a52 <assert_failed>

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3a:	d102      	bne.n	8001d42 <HAL_RCC_OscConfig+0x326>
 8001d3c:	f7ff fbf5 	bl	800152a <LL_RCC_HSE_Enable>
 8001d40:	e00d      	b.n	8001d5e <HAL_RCC_OscConfig+0x342>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001d4a:	d104      	bne.n	8001d56 <HAL_RCC_OscConfig+0x33a>
 8001d4c:	f7ff fbc0 	bl	80014d0 <LL_RCC_HSE_EnableTcxo>
 8001d50:	f7ff fbeb 	bl	800152a <LL_RCC_HSE_Enable>
 8001d54:	e003      	b.n	8001d5e <HAL_RCC_OscConfig+0x342>
 8001d56:	f7ff fbf6 	bl	8001546 <LL_RCC_HSE_Disable>
 8001d5a:	f7ff fbc7 	bl	80014ec <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d012      	beq.n	8001d8c <HAL_RCC_OscConfig+0x370>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d66:	f7fe ffcd 	bl	8000d04 <HAL_GetTick>
 8001d6a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x364>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6e:	f7fe ffc9 	bl	8000d04 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b64      	cmp	r3, #100	; 0x64
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x364>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e33a      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d80:	f7ff fbef 	bl	8001562 <LL_RCC_HSE_IsReady>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f1      	beq.n	8001d6e <HAL_RCC_OscConfig+0x352>
 8001d8a:	e013      	b.n	8001db4 <HAL_RCC_OscConfig+0x398>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7fe ffba 	bl	8000d04 <HAL_GetTick>
 8001d90:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x38a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7fe ffb6 	bl	8000d04 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x38a>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e327      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001da6:	f7ff fbdc 	bl	8001562 <LL_RCC_HSE_IsReady>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1f1      	bne.n	8001d94 <HAL_RCC_OscConfig+0x378>
 8001db0:	e000      	b.n	8001db4 <HAL_RCC_OscConfig+0x398>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db2:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d062      	beq.n	8001e86 <HAL_RCC_OscConfig+0x46a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d009      	beq.n	8001ddc <HAL_RCC_OscConfig+0x3c0>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd0:	d004      	beq.n	8001ddc <HAL_RCC_OscConfig+0x3c0>
 8001dd2:	f240 2107 	movw	r1, #519	; 0x207
 8001dd6:	486f      	ldr	r0, [pc, #444]	; (8001f94 <HAL_RCC_OscConfig+0x578>)
 8001dd8:	f7fe fe3b 	bl	8000a52 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	2b7f      	cmp	r3, #127	; 0x7f
 8001de2:	d904      	bls.n	8001dee <HAL_RCC_OscConfig+0x3d2>
 8001de4:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001de8:	486a      	ldr	r0, [pc, #424]	; (8001f94 <HAL_RCC_OscConfig+0x578>)
 8001dea:	f7fe fe32 	bl	8000a52 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_OscConfig+0x3e4>
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d113      	bne.n	8001e22 <HAL_RCC_OscConfig+0x406>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d110      	bne.n	8001e22 <HAL_RCC_OscConfig+0x406>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e00:	f7ff fbdc 	bl	80015bc <LL_RCC_HSI_IsReady>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <HAL_RCC_OscConfig+0x3fa>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_RCC_OscConfig+0x3fa>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e2ef      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fbdf 	bl	80015de <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e20:	e031      	b.n	8001e86 <HAL_RCC_OscConfig+0x46a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d019      	beq.n	8001e5e <HAL_RCC_OscConfig+0x442>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e2a:	f7ff fbab 	bl	8001584 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2e:	f7fe ff69 	bl	8000d04 <HAL_GetTick>
 8001e32:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e36:	f7fe ff65 	bl	8000d04 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e2d6      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e48:	f7ff fbb8 	bl	80015bc <LL_RCC_HSI_IsReady>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f1      	beq.n	8001e36 <HAL_RCC_OscConfig+0x41a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fbc1 	bl	80015de <LL_RCC_HSI_SetCalibTrimming>
 8001e5c:	e013      	b.n	8001e86 <HAL_RCC_OscConfig+0x46a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5e:	f7ff fb9f 	bl	80015a0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e62:	f7fe ff4f 	bl	8000d04 <HAL_GetTick>
 8001e66:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x460>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7fe ff4b 	bl	8000d04 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e2bc      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e7c:	f7ff fb9e 	bl	80015bc <LL_RCC_HSI_IsReady>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f1      	bne.n	8001e6a <HAL_RCC_OscConfig+0x44e>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8087 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x586>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_RCC_OscConfig+0x492>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d004      	beq.n	8001eae <HAL_RCC_OscConfig+0x492>
 8001ea4:	f240 2149 	movw	r1, #585	; 0x249
 8001ea8:	483a      	ldr	r0, [pc, #232]	; (8001f94 <HAL_RCC_OscConfig+0x578>)
 8001eaa:	f7fe fdd2 	bl	8000a52 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d05f      	beq.n	8001f76 <HAL_RCC_OscConfig+0x55a>
    {
      uint32_t csr_temp = RCC->CSR;
 8001eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ebe:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_RCC_OscConfig+0x4be>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	2b10      	cmp	r3, #16
 8001ece:	d004      	beq.n	8001eda <HAL_RCC_OscConfig+0x4be>
 8001ed0:	f240 2151 	movw	r1, #593	; 0x251
 8001ed4:	482f      	ldr	r0, [pc, #188]	; (8001f94 <HAL_RCC_OscConfig+0x578>)
 8001ed6:	f7fe fdbc 	bl	8000a52 <assert_failed>

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d031      	beq.n	8001f4c <HAL_RCC_OscConfig+0x530>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <HAL_RCC_OscConfig+0x4e4>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_OscConfig+0x4e4>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e27a      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d013      	beq.n	8001f32 <HAL_RCC_OscConfig+0x516>
        {
          __HAL_RCC_LSI_DISABLE();
 8001f0a:	f7ff fb9d 	bl	8001648 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f0e:	f7fe fef9 	bl	8000d04 <HAL_GetTick>
 8001f12:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x50c>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f16:	f7fe fef5 	bl	8000d04 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b11      	cmp	r3, #17
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x50c>
            {
              return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e266      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001f28:	f7ff fb9e 	bl	8001668 <LL_RCC_LSI_IsReady>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f1      	bne.n	8001f16 <HAL_RCC_OscConfig+0x4fa>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3a:	f023 0210 	bic.w	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4c:	f7ff fb6c 	bl	8001628 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7fe fed8 	bl	8000d04 <HAL_GetTick>
 8001f54:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x54e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f58:	f7fe fed4 	bl	8000d04 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b11      	cmp	r3, #17
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x54e>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e245      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001f6a:	f7ff fb7d 	bl	8001668 <LL_RCC_LSI_IsReady>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f1      	beq.n	8001f58 <HAL_RCC_OscConfig+0x53c>
 8001f74:	e015      	b.n	8001fa2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f76:	f7ff fb67 	bl	8001648 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7a:	f7fe fec3 	bl	8000d04 <HAL_GetTick>
 8001f7e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_OscConfig+0x57c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f82:	f7fe febf 	bl	8000d04 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b11      	cmp	r3, #17
 8001f8e:	d903      	bls.n	8001f98 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e230      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
 8001f94:	08004410 	.word	0x08004410
      while (LL_RCC_LSI_IsReady() != 0U)
 8001f98:	f7ff fb66 	bl	8001668 <LL_RCC_LSI_IsReady>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1ef      	bne.n	8001f82 <HAL_RCC_OscConfig+0x566>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80f3 	beq.w	8002196 <HAL_RCC_OscConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d014      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x5c6>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b81      	cmp	r3, #129	; 0x81
 8001fbe:	d010      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x5c6>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d00c      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x5c6>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b85      	cmp	r3, #133	; 0x85
 8001fce:	d008      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x5c6>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	d004      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x5c6>
 8001fd8:	f240 2199 	movw	r1, #665	; 0x299
 8001fdc:	486a      	ldr	r0, [pc, #424]	; (8002188 <HAL_RCC_OscConfig+0x76c>)
 8001fde:	f7fe fd38 	bl	8000a52 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001fe2:	f7ff fa63 	bl	80014ac <LL_PWR_IsEnabledBkUpAccess>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d113      	bne.n	8002014 <HAL_RCC_OscConfig+0x5f8>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001fec:	f7ff fa22 	bl	8001434 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff0:	f7fe fe88 	bl	8000d04 <HAL_GetTick>
 8001ff4:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff8:	f7fe fe84 	bl	8000d04 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e1f5      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800200a:	f7ff fa4f 	bl	80014ac <LL_PWR_IsEnabledBkUpAccess>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f1      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x5dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d07b      	beq.n	8002114 <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b85      	cmp	r3, #133	; 0x85
 8002022:	d003      	beq.n	800202c <HAL_RCC_OscConfig+0x610>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	2b05      	cmp	r3, #5
 800202a:	d109      	bne.n	8002040 <HAL_RCC_OscConfig+0x624>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800202c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002040:	f7fe fe60 	bl	8000d04 <HAL_GetTick>
 8002044:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800205a:	e00a      	b.n	8002072 <HAL_RCC_OscConfig+0x656>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205c:	f7fe fe52 	bl	8000d04 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x656>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e1c1      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002072:	f7ff fac8 	bl	8001606 <LL_RCC_LSE_IsReady>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0ef      	beq.n	800205c <HAL_RCC_OscConfig+0x640>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b81      	cmp	r3, #129	; 0x81
 8002082:	d003      	beq.n	800208c <HAL_RCC_OscConfig+0x670>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b85      	cmp	r3, #133	; 0x85
 800208a:	d121      	bne.n	80020d0 <HAL_RCC_OscConfig+0x6b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7fe fe3a 	bl	8000d04 <HAL_GetTick>
 8002090:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800209e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020a6:	e00a      	b.n	80020be <HAL_RCC_OscConfig+0x6a2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a8:	f7fe fe2c 	bl	8000d04 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x6a2>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e19b      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0ec      	beq.n	80020a8 <HAL_RCC_OscConfig+0x68c>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80020ce:	e062      	b.n	8002196 <HAL_RCC_OscConfig+0x77a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7fe fe18 	bl	8000d04 <HAL_GetTick>
 80020d4:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_OscConfig+0x6e6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ec:	f7fe fe0a 	bl	8000d04 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e179      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1ec      	bne.n	80020ec <HAL_RCC_OscConfig+0x6d0>
 8002112:	e040      	b.n	8002196 <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7fe fdf6 	bl	8000d04 <HAL_GetTick>
 8002118:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800211a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800212a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800212e:	e00a      	b.n	8002146 <HAL_RCC_OscConfig+0x72a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002130:	f7fe fde8 	bl	8000d04 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e157      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1ec      	bne.n	8002130 <HAL_RCC_OscConfig+0x714>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002156:	f7fe fdd5 	bl	8000d04 <HAL_GetTick>
 800215a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800215c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002170:	e00c      	b.n	800218c <HAL_RCC_OscConfig+0x770>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7fe fdc7 	bl	8000d04 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d903      	bls.n	800218c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e136      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
 8002188:	08004410 	.word	0x08004410
      while (LL_RCC_LSE_IsReady() != 0U)
 800218c:	f7ff fa3b 	bl	8001606 <LL_RCC_LSE_IsReady>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1ed      	bne.n	8002172 <HAL_RCC_OscConfig+0x756>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00c      	beq.n	80021b8 <HAL_RCC_OscConfig+0x79c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d008      	beq.n	80021b8 <HAL_RCC_OscConfig+0x79c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d004      	beq.n	80021b8 <HAL_RCC_OscConfig+0x79c>
 80021ae:	f240 310f 	movw	r1, #783	; 0x30f
 80021b2:	4893      	ldr	r0, [pc, #588]	; (8002400 <HAL_RCC_OscConfig+0x9e4>)
 80021b4:	f7fe fc4d 	bl	8000a52 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8119 	beq.w	80023f4 <HAL_RCC_OscConfig+0x9d8>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	2b0c      	cmp	r3, #12
 80021c6:	f000 80ec 	beq.w	80023a2 <HAL_RCC_OscConfig+0x986>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	f040 80c0 	bne.w	8002354 <HAL_RCC_OscConfig+0x938>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d010      	beq.n	80021fe <HAL_RCC_OscConfig+0x7e2>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d00c      	beq.n	80021fe <HAL_RCC_OscConfig+0x7e2>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d008      	beq.n	80021fe <HAL_RCC_OscConfig+0x7e2>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d004      	beq.n	80021fe <HAL_RCC_OscConfig+0x7e2>
 80021f4:	f240 3119 	movw	r1, #793	; 0x319
 80021f8:	4881      	ldr	r0, [pc, #516]	; (8002400 <HAL_RCC_OscConfig+0x9e4>)
 80021fa:	f7fe fc2a 	bl	8000a52 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002202:	2b00      	cmp	r3, #0
 8002204:	d020      	beq.n	8002248 <HAL_RCC_OscConfig+0x82c>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220a:	2b10      	cmp	r3, #16
 800220c:	d01c      	beq.n	8002248 <HAL_RCC_OscConfig+0x82c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002212:	2b20      	cmp	r3, #32
 8002214:	d018      	beq.n	8002248 <HAL_RCC_OscConfig+0x82c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800221a:	2b30      	cmp	r3, #48	; 0x30
 800221c:	d014      	beq.n	8002248 <HAL_RCC_OscConfig+0x82c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002222:	2b40      	cmp	r3, #64	; 0x40
 8002224:	d010      	beq.n	8002248 <HAL_RCC_OscConfig+0x82c>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222a:	2b50      	cmp	r3, #80	; 0x50
 800222c:	d00c      	beq.n	8002248 <HAL_RCC_OscConfig+0x82c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002232:	2b60      	cmp	r3, #96	; 0x60
 8002234:	d008      	beq.n	8002248 <HAL_RCC_OscConfig+0x82c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223a:	2b70      	cmp	r3, #112	; 0x70
 800223c:	d004      	beq.n	8002248 <HAL_RCC_OscConfig+0x82c>
 800223e:	f240 311a 	movw	r1, #794	; 0x31a
 8002242:	486f      	ldr	r0, [pc, #444]	; (8002400 <HAL_RCC_OscConfig+0x9e4>)
 8002244:	f7fe fc05 	bl	8000a52 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224c:	2b05      	cmp	r3, #5
 800224e:	d903      	bls.n	8002258 <HAL_RCC_OscConfig+0x83c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002254:	2b7f      	cmp	r3, #127	; 0x7f
 8002256:	d904      	bls.n	8002262 <HAL_RCC_OscConfig+0x846>
 8002258:	f240 311b 	movw	r1, #795	; 0x31b
 800225c:	4868      	ldr	r0, [pc, #416]	; (8002400 <HAL_RCC_OscConfig+0x9e4>)
 800225e:	f7fe fbf8 	bl	8000a52 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800226a:	d304      	bcc.n	8002276 <HAL_RCC_OscConfig+0x85a>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	f5b3 1f78 	cmp.w	r3, #4063232	; 0x3e0000
 8002274:	d904      	bls.n	8002280 <HAL_RCC_OscConfig+0x864>
 8002276:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800227a:	4861      	ldr	r0, [pc, #388]	; (8002400 <HAL_RCC_OscConfig+0x9e4>)
 800227c:	f7fe fbe9 	bl	8000a52 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002288:	d304      	bcc.n	8002294 <HAL_RCC_OscConfig+0x878>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002292:	d904      	bls.n	800229e <HAL_RCC_OscConfig+0x882>
 8002294:	f240 311d 	movw	r1, #797	; 0x31d
 8002298:	4859      	ldr	r0, [pc, #356]	; (8002400 <HAL_RCC_OscConfig+0x9e4>)
 800229a:	f7fe fbda 	bl	8000a52 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022a6:	d304      	bcc.n	80022b2 <HAL_RCC_OscConfig+0x896>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80022b0:	d904      	bls.n	80022bc <HAL_RCC_OscConfig+0x8a0>
 80022b2:	f240 311e 	movw	r1, #798	; 0x31e
 80022b6:	4852      	ldr	r0, [pc, #328]	; (8002400 <HAL_RCC_OscConfig+0x9e4>)
 80022b8:	f7fe fbcb 	bl	8000a52 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022bc:	f7ff fb0a 	bl	80018d4 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe fd20 	bl	8000d04 <HAL_GetTick>
 80022c4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c8:	f7fe fd1c 	bl	8000d04 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b0a      	cmp	r3, #10
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x8be>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e08d      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
        while (LL_RCC_PLL_IsReady() != 0U)
 80022da:	f7ff fb09 	bl	80018f0 <LL_RCC_PLL_IsReady>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f1      	bne.n	80022c8 <HAL_RCC_OscConfig+0x8ac>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	4b46      	ldr	r3, [pc, #280]	; (8002404 <HAL_RCC_OscConfig+0x9e8>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022f6:	4311      	orrs	r1, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022fc:	0212      	lsls	r2, r2, #8
 80022fe:	4311      	orrs	r1, r2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002304:	4311      	orrs	r1, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800230a:	4311      	orrs	r1, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002310:	430a      	orrs	r2, r1
 8002312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002316:	4313      	orrs	r3, r2
 8002318:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800231a:	f7ff facd 	bl	80018b8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800231e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232e:	f7fe fce9 	bl	8000d04 <HAL_GetTick>
 8002332:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x92c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002336:	f7fe fce5 	bl	8000d04 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b0a      	cmp	r3, #10
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x92c>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e056      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002348:	f7ff fad2 	bl	80018f0 <LL_RCC_PLL_IsReady>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f1      	beq.n	8002336 <HAL_RCC_OscConfig+0x91a>
 8002352:	e04f      	b.n	80023f4 <HAL_RCC_OscConfig+0x9d8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002354:	f7ff fabe 	bl	80018d4 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002362:	f023 0303 	bic.w	r3, r3, #3
 8002366:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8002368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002372:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237a:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe fcc2 	bl	8000d04 <HAL_GetTick>
 8002380:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x97a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7fe fcbe 	bl	8000d04 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b0a      	cmp	r3, #10
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x97a>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e02f      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002396:	f7ff faab 	bl	80018f0 <LL_RCC_PLL_IsReady>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f1      	bne.n	8002384 <HAL_RCC_OscConfig+0x968>
 80023a0:	e028      	b.n	80023f4 <HAL_RCC_OscConfig+0x9d8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x992>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e023      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	f003 0203 	and.w	r2, r3, #3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d115      	bne.n	80023f0 <HAL_RCC_OscConfig+0x9d4>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d10e      	bne.n	80023f0 <HAL_RCC_OscConfig+0x9d4>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	429a      	cmp	r2, r3
 80023e0:	d106      	bne.n	80023f0 <HAL_RCC_OscConfig+0x9d4>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_OscConfig+0x9d8>
        {
          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <HAL_RCC_OscConfig+0x9da>
        }
      }
    }
  }
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	08004410 	.word	0x08004410
 8002404:	11c1808c 	.word	0x11c1808c

08002408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e252      	b.n	80028c2 <HAL_RCC_ClockConfig+0x4ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_RCC_ClockConfig+0x24>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b6f      	cmp	r3, #111	; 0x6f
 800242a:	d904      	bls.n	8002436 <HAL_RCC_ClockConfig+0x2e>
 800242c:	f240 31a7 	movw	r1, #935	; 0x3a7
 8002430:	489e      	ldr	r0, [pc, #632]	; (80026ac <HAL_RCC_ClockConfig+0x2a4>)
 8002432:	f7fe fb0e 	bl	8000a52 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <HAL_RCC_ClockConfig+0x4a>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d007      	beq.n	8002452 <HAL_RCC_ClockConfig+0x4a>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d004      	beq.n	8002452 <HAL_RCC_ClockConfig+0x4a>
 8002448:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 800244c:	4897      	ldr	r0, [pc, #604]	; (80026ac <HAL_RCC_ClockConfig+0x2a4>)
 800244e:	f7fe fb00 	bl	8000a52 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002452:	4b97      	ldr	r3, [pc, #604]	; (80026b0 <HAL_RCC_ClockConfig+0x2a8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d91b      	bls.n	8002498 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002460:	4b93      	ldr	r3, [pc, #588]	; (80026b0 <HAL_RCC_ClockConfig+0x2a8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 0207 	bic.w	r2, r3, #7
 8002468:	4991      	ldr	r1, [pc, #580]	; (80026b0 <HAL_RCC_ClockConfig+0x2a8>)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002470:	f7fe fc48 	bl	8000d04 <HAL_GetTick>
 8002474:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	e008      	b.n	800248a <HAL_RCC_ClockConfig+0x82>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002478:	f7fe fc44 	bl	8000d04 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_ClockConfig+0x82>
      {
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e21b      	b.n	80028c2 <HAL_RCC_ClockConfig+0x4ba>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b89      	ldr	r3, [pc, #548]	; (80026b0 <HAL_RCC_ClockConfig+0x2a8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d1ef      	bne.n	8002478 <HAL_RCC_ClockConfig+0x70>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d053      	beq.n	800254c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d038      	beq.n	800251e <HAL_RCC_ClockConfig+0x116>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b80      	cmp	r3, #128	; 0x80
 80024b2:	d034      	beq.n	800251e <HAL_RCC_ClockConfig+0x116>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d030      	beq.n	800251e <HAL_RCC_ClockConfig+0x116>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2b90      	cmp	r3, #144	; 0x90
 80024c2:	d02c      	beq.n	800251e <HAL_RCC_ClockConfig+0x116>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d028      	beq.n	800251e <HAL_RCC_ClockConfig+0x116>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b50      	cmp	r3, #80	; 0x50
 80024d2:	d024      	beq.n	800251e <HAL_RCC_ClockConfig+0x116>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2ba0      	cmp	r3, #160	; 0xa0
 80024da:	d020      	beq.n	800251e <HAL_RCC_ClockConfig+0x116>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b60      	cmp	r3, #96	; 0x60
 80024e2:	d01c      	beq.n	800251e <HAL_RCC_ClockConfig+0x116>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	2bb0      	cmp	r3, #176	; 0xb0
 80024ea:	d018      	beq.n	800251e <HAL_RCC_ClockConfig+0x116>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b70      	cmp	r3, #112	; 0x70
 80024f2:	d014      	beq.n	800251e <HAL_RCC_ClockConfig+0x116>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2bc0      	cmp	r3, #192	; 0xc0
 80024fa:	d010      	beq.n	800251e <HAL_RCC_ClockConfig+0x116>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2bd0      	cmp	r3, #208	; 0xd0
 8002502:	d00c      	beq.n	800251e <HAL_RCC_ClockConfig+0x116>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2be0      	cmp	r3, #224	; 0xe0
 800250a:	d008      	beq.n	800251e <HAL_RCC_ClockConfig+0x116>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2bf0      	cmp	r3, #240	; 0xf0
 8002512:	d004      	beq.n	800251e <HAL_RCC_ClockConfig+0x116>
 8002514:	f240 31c5 	movw	r1, #965	; 0x3c5
 8002518:	4864      	ldr	r0, [pc, #400]	; (80026ac <HAL_RCC_ClockConfig+0x2a4>)
 800251a:	f7fe fa9a 	bl	8000a52 <assert_failed>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff f936 	bl	8001794 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002528:	f7fe fbec 	bl	8000d04 <HAL_GetTick>
 800252c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002530:	f7fe fbe8 	bl	8000d04 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1bf      	b.n	80028c2 <HAL_RCC_ClockConfig+0x4ba>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002542:	f7ff fa13 	bl	800196c <LL_RCC_IsActiveFlag_HPRE>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f1      	beq.n	8002530 <HAL_RCC_ClockConfig+0x128>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d053      	beq.n	8002600 <HAL_RCC_ClockConfig+0x1f8>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d038      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x1ca>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	2b80      	cmp	r3, #128	; 0x80
 8002566:	d034      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x1ca>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	2b10      	cmp	r3, #16
 800256e:	d030      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x1ca>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	2b90      	cmp	r3, #144	; 0x90
 8002576:	d02c      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x1ca>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	2b20      	cmp	r3, #32
 800257e:	d028      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x1ca>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	2b50      	cmp	r3, #80	; 0x50
 8002586:	d024      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x1ca>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	2ba0      	cmp	r3, #160	; 0xa0
 800258e:	d020      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x1ca>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	2b60      	cmp	r3, #96	; 0x60
 8002596:	d01c      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x1ca>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	2bb0      	cmp	r3, #176	; 0xb0
 800259e:	d018      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x1ca>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	2b70      	cmp	r3, #112	; 0x70
 80025a6:	d014      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x1ca>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	2bc0      	cmp	r3, #192	; 0xc0
 80025ae:	d010      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x1ca>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	2bd0      	cmp	r3, #208	; 0xd0
 80025b6:	d00c      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x1ca>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	2be0      	cmp	r3, #224	; 0xe0
 80025be:	d008      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x1ca>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	2bf0      	cmp	r3, #240	; 0xf0
 80025c6:	d004      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x1ca>
 80025c8:	f240 31d7 	movw	r1, #983	; 0x3d7
 80025cc:	4837      	ldr	r0, [pc, #220]	; (80026ac <HAL_RCC_ClockConfig+0x2a4>)
 80025ce:	f7fe fa40 	bl	8000a52 <assert_failed>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff f8ef 	bl	80017ba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025dc:	f7fe fb92 	bl	8000d04 <HAL_GetTick>
 80025e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ee>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025e4:	f7fe fb8e 	bl	8000d04 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x1ee>
      {
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e165      	b.n	80028c2 <HAL_RCC_ClockConfig+0x4ba>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80025f6:	f7ff f9ca 	bl	800198e <LL_RCC_IsActiveFlag_C2HPRE>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f1      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x1dc>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002608:	2b00      	cmp	r3, #0
 800260a:	d058      	beq.n	80026be <HAL_RCC_ClockConfig+0x2b6>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d038      	beq.n	8002686 <HAL_RCC_ClockConfig+0x27e>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b80      	cmp	r3, #128	; 0x80
 800261a:	d034      	beq.n	8002686 <HAL_RCC_ClockConfig+0x27e>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2b10      	cmp	r3, #16
 8002622:	d030      	beq.n	8002686 <HAL_RCC_ClockConfig+0x27e>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	2b90      	cmp	r3, #144	; 0x90
 800262a:	d02c      	beq.n	8002686 <HAL_RCC_ClockConfig+0x27e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b20      	cmp	r3, #32
 8002632:	d028      	beq.n	8002686 <HAL_RCC_ClockConfig+0x27e>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	2b50      	cmp	r3, #80	; 0x50
 800263a:	d024      	beq.n	8002686 <HAL_RCC_ClockConfig+0x27e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2ba0      	cmp	r3, #160	; 0xa0
 8002642:	d020      	beq.n	8002686 <HAL_RCC_ClockConfig+0x27e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	2b60      	cmp	r3, #96	; 0x60
 800264a:	d01c      	beq.n	8002686 <HAL_RCC_ClockConfig+0x27e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2bb0      	cmp	r3, #176	; 0xb0
 8002652:	d018      	beq.n	8002686 <HAL_RCC_ClockConfig+0x27e>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b70      	cmp	r3, #112	; 0x70
 800265a:	d014      	beq.n	8002686 <HAL_RCC_ClockConfig+0x27e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2bc0      	cmp	r3, #192	; 0xc0
 8002662:	d010      	beq.n	8002686 <HAL_RCC_ClockConfig+0x27e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2bd0      	cmp	r3, #208	; 0xd0
 800266a:	d00c      	beq.n	8002686 <HAL_RCC_ClockConfig+0x27e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	2be0      	cmp	r3, #224	; 0xe0
 8002672:	d008      	beq.n	8002686 <HAL_RCC_ClockConfig+0x27e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2bf0      	cmp	r3, #240	; 0xf0
 800267a:	d004      	beq.n	8002686 <HAL_RCC_ClockConfig+0x27e>
 800267c:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8002680:	480a      	ldr	r0, [pc, #40]	; (80026ac <HAL_RCC_ClockConfig+0x2a4>)
 8002682:	f7fe f9e6 	bl	8000a52 <assert_failed>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff f8aa 	bl	80017e4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002690:	f7fe fb38 	bl	8000d04 <HAL_GetTick>
 8002694:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002696:	e00d      	b.n	80026b4 <HAL_RCC_ClockConfig+0x2ac>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002698:	f7fe fb34 	bl	8000d04 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d906      	bls.n	80026b4 <HAL_RCC_ClockConfig+0x2ac>
      {
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e10b      	b.n	80028c2 <HAL_RCC_ClockConfig+0x4ba>
 80026aa:	bf00      	nop
 80026ac:	08004410 	.word	0x08004410
 80026b0:	58004000 	.word	0x58004000
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80026b4:	f7ff f97d 	bl	80019b2 <LL_RCC_IsActiveFlag_SHDHPRE>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0ec      	beq.n	8002698 <HAL_RCC_ClockConfig+0x290>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d033      	beq.n	8002732 <HAL_RCC_ClockConfig+0x32a>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d018      	beq.n	8002704 <HAL_RCC_ClockConfig+0x2fc>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026da:	d013      	beq.n	8002704 <HAL_RCC_ClockConfig+0x2fc>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80026e4:	d00e      	beq.n	8002704 <HAL_RCC_ClockConfig+0x2fc>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80026ee:	d009      	beq.n	8002704 <HAL_RCC_ClockConfig+0x2fc>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026f8:	d004      	beq.n	8002704 <HAL_RCC_ClockConfig+0x2fc>
 80026fa:	f240 31fa 	movw	r1, #1018	; 0x3fa
 80026fe:	4873      	ldr	r0, [pc, #460]	; (80028cc <HAL_RCC_ClockConfig+0x4c4>)
 8002700:	f7fe f9a7 	bl	8000a52 <assert_failed>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff f881 	bl	8001810 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800270e:	f7fe faf9 	bl	8000d04 <HAL_GetTick>
 8002712:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_ClockConfig+0x320>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002716:	f7fe faf5 	bl	8000d04 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_ClockConfig+0x320>
      {
        return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e0cc      	b.n	80028c2 <HAL_RCC_ClockConfig+0x4ba>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002728:	f7ff f955 	bl	80019d6 <LL_RCC_IsActiveFlag_PPRE1>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f1      	beq.n	8002716 <HAL_RCC_ClockConfig+0x30e>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d034      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x3a0>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d018      	beq.n	8002778 <HAL_RCC_ClockConfig+0x370>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274e:	d013      	beq.n	8002778 <HAL_RCC_ClockConfig+0x370>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002758:	d00e      	beq.n	8002778 <HAL_RCC_ClockConfig+0x370>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002762:	d009      	beq.n	8002778 <HAL_RCC_ClockConfig+0x370>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800276c:	d004      	beq.n	8002778 <HAL_RCC_ClockConfig+0x370>
 800276e:	f240 410b 	movw	r1, #1035	; 0x40b
 8002772:	4856      	ldr	r0, [pc, #344]	; (80028cc <HAL_RCC_ClockConfig+0x4c4>)
 8002774:	f7fe f96d 	bl	8000a52 <assert_failed>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff f859 	bl	8001836 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002784:	f7fe fabe 	bl	8000d04 <HAL_GetTick>
 8002788:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_ClockConfig+0x396>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800278c:	f7fe faba 	bl	8000d04 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0x396>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e091      	b.n	80028c2 <HAL_RCC_ClockConfig+0x4ba>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800279e:	f7ff f92b 	bl	80019f8 <LL_RCC_IsActiveFlag_PPRE2>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f1      	beq.n	800278c <HAL_RCC_ClockConfig+0x384>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d058      	beq.n	8002866 <HAL_RCC_ClockConfig+0x45e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d010      	beq.n	80027de <HAL_RCC_ClockConfig+0x3d6>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d00c      	beq.n	80027de <HAL_RCC_ClockConfig+0x3d6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d008      	beq.n	80027de <HAL_RCC_ClockConfig+0x3d6>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d004      	beq.n	80027de <HAL_RCC_ClockConfig+0x3d6>
 80027d4:	f240 411c 	movw	r1, #1052	; 0x41c
 80027d8:	483c      	ldr	r0, [pc, #240]	; (80028cc <HAL_RCC_ClockConfig+0x4c4>)
 80027da:	f7fe f93a 	bl	8000a52 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d106      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x3ec>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80027e6:	f7fe febc 	bl	8001562 <LL_RCC_HSE_IsReady>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d11e      	bne.n	800282e <HAL_RCC_ClockConfig+0x426>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e066      	b.n	80028c2 <HAL_RCC_ClockConfig+0x4ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d106      	bne.n	800280a <HAL_RCC_ClockConfig+0x402>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80027fc:	f7ff f878 	bl	80018f0 <LL_RCC_PLL_IsReady>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d113      	bne.n	800282e <HAL_RCC_ClockConfig+0x426>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e05b      	b.n	80028c2 <HAL_RCC_ClockConfig+0x4ba>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_RCC_ClockConfig+0x418>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002812:	f7fe ff56 	bl	80016c2 <LL_RCC_MSI_IsReady>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d108      	bne.n	800282e <HAL_RCC_ClockConfig+0x426>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e050      	b.n	80028c2 <HAL_RCC_ClockConfig+0x4ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002820:	f7fe fecc 	bl	80015bc <LL_RCC_HSI_IsReady>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_RCC_ClockConfig+0x426>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e049      	b.n	80028c2 <HAL_RCC_ClockConfig+0x4ba>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe ff90 	bl	8001758 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002838:	f7fe fa64 	bl	8000d04 <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	e00a      	b.n	8002856 <HAL_RCC_ClockConfig+0x44e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002840:	f7fe fa60 	bl	8000d04 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	; 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_ClockConfig+0x44e>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e035      	b.n	80028c2 <HAL_RCC_ClockConfig+0x4ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	f7fe ff92 	bl	800177e <LL_RCC_GetSysClkSource>
 800285a:	4602      	mov	r2, r0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	429a      	cmp	r2, r3
 8002864:	d1ec      	bne.n	8002840 <HAL_RCC_ClockConfig+0x438>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <HAL_RCC_ClockConfig+0x4c8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d21b      	bcs.n	80028ac <HAL_RCC_ClockConfig+0x4a4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002874:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <HAL_RCC_ClockConfig+0x4c8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f023 0207 	bic.w	r2, r3, #7
 800287c:	4914      	ldr	r1, [pc, #80]	; (80028d0 <HAL_RCC_ClockConfig+0x4c8>)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002884:	f7fe fa3e 	bl	8000d04 <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	e008      	b.n	800289e <HAL_RCC_ClockConfig+0x496>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800288c:	f7fe fa3a 	bl	8000d04 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_ClockConfig+0x496>
      {
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e011      	b.n	80028c2 <HAL_RCC_ClockConfig+0x4ba>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <HAL_RCC_ClockConfig+0x4c8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d1ef      	bne.n	800288c <HAL_RCC_ClockConfig+0x484>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80028ac:	f000 f8b6 	bl	8002a1c <HAL_RCC_GetHCLKFreq>
 80028b0:	4603      	mov	r3, r0
 80028b2:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <HAL_RCC_ClockConfig+0x4cc>)
 80028b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80028b6:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HAL_RCC_ClockConfig+0x4d0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe f9d6 	bl	8000c6c <HAL_InitTick>
 80028c0:	4603      	mov	r3, r0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	08004410 	.word	0x08004410
 80028d0:	58004000 	.word	0x58004000
 80028d4:	20000000 	.word	0x20000000
 80028d8:	20000004 	.word	0x20000004

080028dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ea:	f7fe ff48 	bl	800177e <LL_RCC_GetSysClkSource>
 80028ee:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028f0:	f7ff f831 	bl	8001956 <LL_RCC_PLL_GetMainSource>
 80028f4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x2c>
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	d139      	bne.n	8002976 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d136      	bne.n	8002976 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002908:	f7fe feeb 	bl	80016e2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d115      	bne.n	800293e <HAL_RCC_GetSysClockFreq+0x62>
 8002912:	f7fe fee6 	bl	80016e2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002916:	4603      	mov	r3, r0
 8002918:	2b01      	cmp	r3, #1
 800291a:	d106      	bne.n	800292a <HAL_RCC_GetSysClockFreq+0x4e>
 800291c:	f7fe fef1 	bl	8001702 <LL_RCC_MSI_GetRange>
 8002920:	4603      	mov	r3, r0
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	e005      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x5a>
 800292a:	f7fe fef5 	bl	8001718 <LL_RCC_MSI_GetRangeAfterStandby>
 800292e:	4603      	mov	r3, r0
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	4a36      	ldr	r2, [pc, #216]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x134>)
 8002938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293c:	e014      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x8c>
 800293e:	f7fe fed0 	bl	80016e2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002942:	4603      	mov	r3, r0
 8002944:	2b01      	cmp	r3, #1
 8002946:	d106      	bne.n	8002956 <HAL_RCC_GetSysClockFreq+0x7a>
 8002948:	f7fe fedb 	bl	8001702 <LL_RCC_MSI_GetRange>
 800294c:	4603      	mov	r3, r0
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	e005      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x86>
 8002956:	f7fe fedf 	bl	8001718 <LL_RCC_MSI_GetRangeAfterStandby>
 800295a:	4603      	mov	r3, r0
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	4a2b      	ldr	r2, [pc, #172]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x134>)
 8002964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002968:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d115      	bne.n	800299c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002974:	e012      	b.n	800299c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b04      	cmp	r3, #4
 800297a:	d102      	bne.n	8002982 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800297c:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x138>)
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	e00c      	b.n	800299c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b08      	cmp	r3, #8
 8002986:	d109      	bne.n	800299c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002988:	f7fe fdbe 	bl	8001508 <LL_RCC_HSE_IsEnabledDiv2>
 800298c:	4603      	mov	r3, r0
 800298e:	2b01      	cmp	r3, #1
 8002990:	d102      	bne.n	8002998 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002992:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x138>)
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	e001      	b.n	800299c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002998:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x13c>)
 800299a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800299c:	f7fe feef 	bl	800177e <LL_RCC_GetSysClkSource>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d12f      	bne.n	8002a06 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80029a6:	f7fe ffd6 	bl	8001956 <LL_RCC_PLL_GetMainSource>
 80029aa:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d003      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0xde>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d003      	beq.n	80029c0 <HAL_RCC_GetSysClockFreq+0xe4>
 80029b8:	e00d      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80029ba:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x138>)
 80029bc:	60fb      	str	r3, [r7, #12]
        break;
 80029be:	e00d      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80029c0:	f7fe fda2 	bl	8001508 <LL_RCC_HSE_IsEnabledDiv2>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d102      	bne.n	80029d0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80029ca:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x138>)
 80029cc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80029ce:	e005      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80029d0:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x13c>)
 80029d2:	60fb      	str	r3, [r7, #12]
        break;
 80029d4:	e002      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	60fb      	str	r3, [r7, #12]
        break;
 80029da:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80029dc:	f7fe ff99 	bl	8001912 <LL_RCC_PLL_GetN>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	fb03 f402 	mul.w	r4, r3, r2
 80029e8:	f7fe ffaa 	bl	8001940 <LL_RCC_PLL_GetDivider>
 80029ec:	4603      	mov	r3, r0
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	3301      	adds	r3, #1
 80029f2:	fbb4 f4f3 	udiv	r4, r4, r3
 80029f6:	f7fe ff98 	bl	800192a <LL_RCC_PLL_GetR>
 80029fa:	4603      	mov	r3, r0
 80029fc:	0f5b      	lsrs	r3, r3, #29
 80029fe:	3301      	adds	r3, #1
 8002a00:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a04:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002a06:	697b      	ldr	r3, [r7, #20]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	371c      	adds	r7, #28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd90      	pop	{r4, r7, pc}
 8002a10:	08004664 	.word	0x08004664
 8002a14:	00f42400 	.word	0x00f42400
 8002a18:	01e84800 	.word	0x01e84800

08002a1c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a1c:	b598      	push	{r3, r4, r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002a20:	f7ff ff5c 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 8002a24:	4604      	mov	r4, r0
 8002a26:	f7fe ff19 	bl	800185c <LL_RCC_GetAHBPrescaler>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	4a03      	ldr	r2, [pc, #12]	; (8002a40 <HAL_RCC_GetHCLKFreq+0x24>)
 8002a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a38:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd98      	pop	{r3, r4, r7, pc}
 8002a40:	08004604 	.word	0x08004604

08002a44 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a44:	b598      	push	{r3, r4, r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a48:	f7ff ffe8 	bl	8002a1c <HAL_RCC_GetHCLKFreq>
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	f7fe ff1d 	bl	800188c <LL_RCC_GetAPB1Prescaler>
 8002a52:	4603      	mov	r3, r0
 8002a54:	0a1b      	lsrs	r3, r3, #8
 8002a56:	4a03      	ldr	r2, [pc, #12]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	bd98      	pop	{r3, r4, r7, pc}
 8002a64:	08004644 	.word	0x08004644

08002a68 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a68:	b598      	push	{r3, r4, r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002a6c:	f7ff ffd6 	bl	8002a1c <HAL_RCC_GetHCLKFreq>
 8002a70:	4604      	mov	r4, r0
 8002a72:	f7fe ff16 	bl	80018a2 <LL_RCC_GetAPB2Prescaler>
 8002a76:	4603      	mov	r3, r0
 8002a78:	0adb      	lsrs	r3, r3, #11
 8002a7a:	4a03      	ldr	r2, [pc, #12]	; (8002a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a80:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd98      	pop	{r3, r4, r7, pc}
 8002a88:	08004644 	.word	0x08004644

08002a8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	4a10      	ldr	r2, [pc, #64]	; (8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002aa4:	f7fe fee5 	bl	8001872 <LL_RCC_GetAHB3Prescaler>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	4a0c      	ldr	r2, [pc, #48]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	0c9c      	lsrs	r4, r3, #18
 8002ac8:	f7fe fcd0 	bl	800146c <HAL_PWREx_GetVoltageRange>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f000 f80b 	bl	8002aec <RCC_SetFlashLatency>
 8002ad6:	4603      	mov	r3, r0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd90      	pop	{r4, r7, pc}
 8002ae0:	08004664 	.word	0x08004664
 8002ae4:	08004604 	.word	0x08004604
 8002ae8:	431bde83 	.word	0x431bde83

08002aec <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08e      	sub	sp, #56	; 0x38
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002af6:	4a3c      	ldr	r2, [pc, #240]	; (8002be8 <RCC_SetFlashLatency+0xfc>)
 8002af8:	f107 0320 	add.w	r3, r7, #32
 8002afc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b00:	6018      	str	r0, [r3, #0]
 8002b02:	3304      	adds	r3, #4
 8002b04:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002b06:	4a39      	ldr	r2, [pc, #228]	; (8002bec <RCC_SetFlashLatency+0x100>)
 8002b08:	f107 0318 	add.w	r3, r7, #24
 8002b0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b10:	6018      	str	r0, [r3, #0]
 8002b12:	3304      	adds	r3, #4
 8002b14:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002b16:	4a36      	ldr	r2, [pc, #216]	; (8002bf0 <RCC_SetFlashLatency+0x104>)
 8002b18:	f107 030c 	add.w	r3, r7, #12
 8002b1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002b22:	2300      	movs	r3, #0
 8002b24:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b2c:	d11d      	bne.n	8002b6a <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	633b      	str	r3, [r7, #48]	; 0x30
 8002b32:	e016      	b.n	8002b62 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002b42:	461a      	mov	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d808      	bhi.n	8002b5c <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b52:	4413      	add	r3, r2
 8002b54:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b5a:	e023      	b.n	8002ba4 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5e:	3301      	adds	r3, #1
 8002b60:	633b      	str	r3, [r7, #48]	; 0x30
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d9e5      	bls.n	8002b34 <RCC_SetFlashLatency+0x48>
 8002b68:	e01c      	b.n	8002ba4 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b6e:	e016      	b.n	8002b9e <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b78:	4413      	add	r3, r2
 8002b7a:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d808      	bhi.n	8002b98 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b8e:	4413      	add	r3, r2
 8002b90:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b96:	e005      	b.n	8002ba4 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d9e5      	bls.n	8002b70 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <RCC_SetFlashLatency+0x108>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f023 0207 	bic.w	r2, r3, #7
 8002bac:	4911      	ldr	r1, [pc, #68]	; (8002bf4 <RCC_SetFlashLatency+0x108>)
 8002bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002bb4:	f7fe f8a6 	bl	8000d04 <HAL_GetTick>
 8002bb8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bba:	e008      	b.n	8002bce <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bbc:	f7fe f8a2 	bl	8000d04 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e007      	b.n	8002bde <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bce:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <RCC_SetFlashLatency+0x108>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d1ef      	bne.n	8002bbc <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3738      	adds	r7, #56	; 0x38
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	08004484 	.word	0x08004484
 8002bec:	0800448c 	.word	0x0800448c
 8002bf0:	08004494 	.word	0x08004494
 8002bf4:	58004000 	.word	0x58004000

08002bf8 <LL_RCC_LSE_IsReady>:
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d101      	bne.n	8002c10 <LL_RCC_LSE_IsReady+0x18>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <LL_RCC_LSE_IsReady+0x1a>
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <LL_RCC_SetUSARTClockSource>:
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	401a      	ands	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <LL_RCC_SetI2SClockSource>:
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <LL_RCC_SetLPUARTClockSource>:
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <LL_RCC_SetI2CClockSource>:
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002caa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	401a      	ands	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002cc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <LL_RCC_SetLPTIMClockSource>:
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	0c1b      	lsrs	r3, r3, #16
 8002cea:	041b      	lsls	r3, r3, #16
 8002cec:	43db      	mvns	r3, r3
 8002cee:	401a      	ands	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	041b      	lsls	r3, r3, #16
 8002cf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <LL_RCC_SetRNGClockSource>:
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d18:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002d1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <LL_RCC_SetADCClockSource>:
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <LL_RCC_SetRTCClockSource>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr

08002d86 <LL_RCC_GetRTCClockSource>:
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <LL_RCC_ForceBackupDomainReset>:
{
 8002d9e:	b480      	push	{r7}
 8002da0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002db6:	bf00      	nop
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <LL_RCC_ReleaseBackupDomainReset>:
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
	...

08002de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002dec:	2300      	movs	r3, #0
 8002dee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002df0:	2300      	movs	r3, #0
 8002df2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b40      	ldr	r3, [pc, #256]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b3e      	ldr	r3, [pc, #248]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002e0c:	217a      	movs	r1, #122	; 0x7a
 8002e0e:	483d      	ldr	r0, [pc, #244]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002e10:	f7fd fe1f 	bl	8000a52 <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d077      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d012      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e30:	d00d      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e44:	d003      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002e46:	2181      	movs	r1, #129	; 0x81
 8002e48:	482e      	ldr	r0, [pc, #184]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002e4a:	f7fd fe02 	bl	8000a52 <assert_failed>


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002e4e:	f7fe faf1 	bl	8001434 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e52:	f7fd ff57 	bl	8000d04 <HAL_GetTick>
 8002e56:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002e58:	e009      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5a:	f7fd ff53 	bl	8000d04 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d902      	bls.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	74fb      	strb	r3, [r7, #19]
        break;
 8002e6c:	e006      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002e6e:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e7a:	d1ee      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      }
    }

    if (ret == HAL_OK)
 8002e7c:	7cfb      	ldrb	r3, [r7, #19]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d144      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002e82:	f7ff ff80 	bl	8002d86 <LL_RCC_GetRTCClockSource>
 8002e86:	4602      	mov	r2, r0
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d00f      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e9e:	f7ff ff7e 	bl	8002d9e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea2:	f7ff ff8c 	bl	8002dbe <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d014      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eba:	f7fd ff23 	bl	8000d04 <HAL_GetTick>
 8002ebe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002ec0:	e00b      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fd ff1f 	bl	8000d04 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d902      	bls.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xfa>
          {
            ret = HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ed8:	e004      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x104>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002eda:	f7ff fe8d 	bl	8002bf8 <LL_RCC_LSE_IsReady>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d1ee      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
          }
        }
      }

      if (ret == HAL_OK)
 8002ee4:	7cfb      	ldrb	r3, [r7, #19]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d105      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff ff34 	bl	8002d5c <LL_RCC_SetRTCClockSource>
 8002ef4:	e00c      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x130>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ef6:	7cfb      	ldrb	r3, [r7, #19]
 8002ef8:	74bb      	strb	r3, [r7, #18]
 8002efa:	e009      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002efc:	0001cff3 	.word	0x0001cff3
 8002f00:	fffe300c 	.word	0xfffe300c
 8002f04:	080044a0 	.word	0x080044a0
 8002f08:	58000400 	.word	0x58000400
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0c:	7cfb      	ldrb	r3, [r7, #19]
 8002f0e:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d01c      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f24:	d012      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4a9e      	ldr	r2, [pc, #632]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00d      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8002f38:	d008      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4a9a      	ldr	r2, [pc, #616]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d003      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002f44:	21cb      	movs	r1, #203	; 0xcb
 8002f46:	4899      	ldr	r0, [pc, #612]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f48:	f7fd fd83 	bl	8000a52 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fe62 	bl	8002c1a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d01c      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f6a:	d012      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a8f      	ldr	r2, [pc, #572]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00d      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8002f7e:	d008      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4a8b      	ldr	r2, [pc, #556]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d003      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002f8a:	21d5      	movs	r1, #213	; 0xd5
 8002f8c:	4887      	ldr	r0, [pc, #540]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002f8e:	f7fd fd60 	bl	8000a52 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fe3f 	bl	8002c1a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d01b      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d012      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb8:	d00d      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fc2:	d008      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002fce:	21df      	movs	r1, #223	; 0xdf
 8002fd0:	4876      	ldr	r0, [pc, #472]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002fd2:	f7fd fd3e 	bl	8000a52 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fe4a 	bl	8002c74 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01c      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ff4:	d012      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	4a6d      	ldr	r2, [pc, #436]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00d      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	4a6b      	ldr	r2, [pc, #428]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d008      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8003012:	d003      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8003014:	21e9      	movs	r1, #233	; 0xe9
 8003016:	4865      	ldr	r0, [pc, #404]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003018:	f7fd fd1b 	bl	8000a52 <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fe58 	bl	8002cd6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01c      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800303a:	d012      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x282>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	4a5d      	ldr	r2, [pc, #372]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00d      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	4a5c      	ldr	r2, [pc, #368]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d008      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8003058:	d003      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x282>
 800305a:	21f3      	movs	r1, #243	; 0xf3
 800305c:	4853      	ldr	r0, [pc, #332]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800305e:	f7fd fcf8 	bl	8000a52 <assert_failed>

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fe35 	bl	8002cd6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01c      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003080:	d012      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	4a4e      	ldr	r2, [pc, #312]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00d      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	4a4c      	ldr	r2, [pc, #304]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d008      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800309e:	d003      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80030a0:	21fd      	movs	r1, #253	; 0xfd
 80030a2:	4842      	ldr	r0, [pc, #264]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80030a4:	f7fd fcd5 	bl	8000a52 <assert_failed>

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff fe12 	bl	8002cd6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d018      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030c6:	d00e      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	4a3e      	ldr	r2, [pc, #248]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d009      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	4a3d      	ldr	r2, [pc, #244]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
 80030dc:	f240 1107 	movw	r1, #263	; 0x107
 80030e0:	4832      	ldr	r0, [pc, #200]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80030e2:	f7fd fcb6 	bl	8000a52 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fdd7 	bl	8002c9e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d018      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003104:	d00e      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	4a31      	ldr	r2, [pc, #196]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d009      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	4a2f      	ldr	r2, [pc, #188]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d004      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800311a:	f240 1111 	movw	r1, #273	; 0x111
 800311e:	4823      	ldr	r0, [pc, #140]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003120:	f7fd fc97 	bl	8000a52 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fdb8 	bl	8002c9e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d018      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003142:	d00e      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	4a23      	ldr	r2, [pc, #140]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d009      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	4a22      	ldr	r2, [pc, #136]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d004      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003158:	f240 111b 	movw	r1, #283	; 0x11b
 800315c:	4813      	ldr	r0, [pc, #76]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800315e:	f7fd fc78 	bl	8000a52 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fd99 	bl	8002c9e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	d045      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003180:	d02e      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800318a:	d029      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003194:	d024      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003196:	f240 1125 	movw	r1, #293	; 0x125
 800319a:	4804      	ldr	r0, [pc, #16]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800319c:	f7fd fc59 	bl	8000a52 <assert_failed>
 80031a0:	e01e      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80031a2:	bf00      	nop
 80031a4:	00030001 	.word	0x00030001
 80031a8:	00030002 	.word	0x00030002
 80031ac:	080044a0 	.word	0x080044a0
 80031b0:	000c0004 	.word	0x000c0004
 80031b4:	000c0008 	.word	0x000c0008
 80031b8:	00300010 	.word	0x00300010
 80031bc:	00300020 	.word	0x00300020
 80031c0:	00c00040 	.word	0x00c00040
 80031c4:	00c00080 	.word	0x00c00080
 80031c8:	00030100 	.word	0x00030100
 80031cc:	00030200 	.word	0x00030200
 80031d0:	000c0400 	.word	0x000c0400
 80031d4:	000c0800 	.word	0x000c0800
 80031d8:	00301000 	.word	0x00301000
 80031dc:	00302000 	.word	0x00302000

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fd30 	bl	8002c4a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f2:	d107      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x424>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80031f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003202:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d028      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	2b00      	cmp	r3, #0
 8003216:	d013      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003220:	d00e      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800322a:	d009      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003234:	d004      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003236:	f44f 719a 	mov.w	r1, #308	; 0x134
 800323a:	4824      	ldr	r0, [pc, #144]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323c:	f7fd fc09 	bl	8000a52 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fd5f 	bl	8002d08 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	2b00      	cmp	r3, #0
 8003250:	d107      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x482>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800325c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003260:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d029      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	2b00      	cmp	r3, #0
 8003274:	d013      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800327e:	d00e      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003288:	d009      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003292:	d004      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8003294:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003298:	480c      	ldr	r0, [pc, #48]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329a:	f7fd fbda 	bl	8000a52 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fd45 	bl	8002d32 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032b0:	d107      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80032c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	080044a0 	.word	0x080044a0

080032d0 <LL_RCC_GetUSARTClockSource>:
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80032d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	401a      	ands	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	041b      	lsls	r3, r3, #16
 80032e8:	4313      	orrs	r3, r2
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <LL_RCC_GetLPUARTClockSource>:
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80032fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003300:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4013      	ands	r3, r2
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr
	...

08003314 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e06f      	b.n	8003406 <HAL_UART_Init+0xf2>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d014      	beq.n	8003358 <HAL_UART_Init+0x44>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a37      	ldr	r2, [pc, #220]	; (8003410 <HAL_UART_Init+0xfc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d023      	beq.n	8003380 <HAL_UART_Init+0x6c>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a35      	ldr	r2, [pc, #212]	; (8003414 <HAL_UART_Init+0x100>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01e      	beq.n	8003380 <HAL_UART_Init+0x6c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a34      	ldr	r2, [pc, #208]	; (8003418 <HAL_UART_Init+0x104>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d019      	beq.n	8003380 <HAL_UART_Init+0x6c>
 800334c:	f240 1139 	movw	r1, #313	; 0x139
 8003350:	4832      	ldr	r0, [pc, #200]	; (800341c <HAL_UART_Init+0x108>)
 8003352:	f7fd fb7e 	bl	8000a52 <assert_failed>
 8003356:	e013      	b.n	8003380 <HAL_UART_Init+0x6c>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a2c      	ldr	r2, [pc, #176]	; (8003410 <HAL_UART_Init+0xfc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00e      	beq.n	8003380 <HAL_UART_Init+0x6c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a2b      	ldr	r2, [pc, #172]	; (8003414 <HAL_UART_Init+0x100>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d009      	beq.n	8003380 <HAL_UART_Init+0x6c>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a29      	ldr	r2, [pc, #164]	; (8003418 <HAL_UART_Init+0x104>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d004      	beq.n	8003380 <HAL_UART_Init+0x6c>
 8003376:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800337a:	4828      	ldr	r0, [pc, #160]	; (800341c <HAL_UART_Init+0x108>)
 800337c:	f7fd fb69 	bl	8000a52 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003386:	2b00      	cmp	r3, #0
 8003388:	d106      	bne.n	8003398 <HAL_UART_Init+0x84>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fd fb9e 	bl	8000ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2224      	movs	r2, #36	; 0x24
 800339c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f835 	bl	8003420 <UART_SetConfig>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_UART_Init+0xac>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e022      	b.n	8003406 <HAL_UART_Init+0xf2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <HAL_UART_Init+0xba>
  {
    UART_AdvFeatureConfig(huart);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fb51 	bl	8003a70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0201 	orr.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fc7c 	bl	8003cfc <UART_CheckIdleState>
 8003404:	4603      	mov	r3, r0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40013800 	.word	0x40013800
 8003414:	40004400 	.word	0x40004400
 8003418:	40008000 	.word	0x40008000
 800341c:	08004518 	.word	0x08004518

08003420 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003420:	b5b0      	push	{r4, r5, r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	76bb      	strb	r3, [r7, #26]
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	4a9f      	ldr	r2, [pc, #636]	; (80036b0 <UART_SetConfig+0x290>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d904      	bls.n	8003440 <UART_SetConfig+0x20>
 8003436:	f640 413b 	movw	r1, #3131	; 0xc3b
 800343a:	489e      	ldr	r0, [pc, #632]	; (80036b4 <UART_SetConfig+0x294>)
 800343c:	f7fd fb09 	bl	8000a52 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003448:	d00d      	beq.n	8003466 <UART_SetConfig+0x46>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <UART_SetConfig+0x46>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345a:	d004      	beq.n	8003466 <UART_SetConfig+0x46>
 800345c:	f640 413c 	movw	r1, #3132	; 0xc3c
 8003460:	4894      	ldr	r0, [pc, #592]	; (80036b4 <UART_SetConfig+0x294>)
 8003462:	f7fd faf6 	bl	8000a52 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a93      	ldr	r2, [pc, #588]	; (80036b8 <UART_SetConfig+0x298>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d10e      	bne.n	800348e <UART_SetConfig+0x6e>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d030      	beq.n	80034da <UART_SetConfig+0xba>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003480:	d02b      	beq.n	80034da <UART_SetConfig+0xba>
 8003482:	f640 413f 	movw	r1, #3135	; 0xc3f
 8003486:	488b      	ldr	r0, [pc, #556]	; (80036b4 <UART_SetConfig+0x294>)
 8003488:	f7fd fae3 	bl	8000a52 <assert_failed>
 800348c:	e025      	b.n	80034da <UART_SetConfig+0xba>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003496:	d012      	beq.n	80034be <UART_SetConfig+0x9e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00e      	beq.n	80034be <UART_SetConfig+0x9e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034a8:	d009      	beq.n	80034be <UART_SetConfig+0x9e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b2:	d004      	beq.n	80034be <UART_SetConfig+0x9e>
 80034b4:	f640 4143 	movw	r1, #3139	; 0xc43
 80034b8:	487e      	ldr	r0, [pc, #504]	; (80036b4 <UART_SetConfig+0x294>)
 80034ba:	f7fd faca 	bl	8000a52 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <UART_SetConfig+0xba>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ce:	d004      	beq.n	80034da <UART_SetConfig+0xba>
 80034d0:	f640 4144 	movw	r1, #3140	; 0xc44
 80034d4:	4877      	ldr	r0, [pc, #476]	; (80036b4 <UART_SetConfig+0x294>)
 80034d6:	f7fd fabc 	bl	8000a52 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00e      	beq.n	8003500 <UART_SetConfig+0xe0>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ea:	d009      	beq.n	8003500 <UART_SetConfig+0xe0>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80034f4:	d004      	beq.n	8003500 <UART_SetConfig+0xe0>
 80034f6:	f640 4147 	movw	r1, #3143	; 0xc47
 80034fa:	486e      	ldr	r0, [pc, #440]	; (80036b4 <UART_SetConfig+0x294>)
 80034fc:	f7fd faa9 	bl	8000a52 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	f023 030c 	bic.w	r3, r3, #12
 8003508:	2b00      	cmp	r3, #0
 800350a:	d103      	bne.n	8003514 <UART_SetConfig+0xf4>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d104      	bne.n	800351e <UART_SetConfig+0xfe>
 8003514:	f640 4148 	movw	r1, #3144	; 0xc48
 8003518:	4866      	ldr	r0, [pc, #408]	; (80036b4 <UART_SetConfig+0x294>)
 800351a:	f7fd fa9a 	bl	8000a52 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d013      	beq.n	800354e <UART_SetConfig+0x12e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352e:	d00e      	beq.n	800354e <UART_SetConfig+0x12e>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003538:	d009      	beq.n	800354e <UART_SetConfig+0x12e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003542:	d004      	beq.n	800354e <UART_SetConfig+0x12e>
 8003544:	f640 4149 	movw	r1, #3145	; 0xc49
 8003548:	485a      	ldr	r0, [pc, #360]	; (80036b4 <UART_SetConfig+0x294>)
 800354a:	f7fd fa82 	bl	8000a52 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d009      	beq.n	800356a <UART_SetConfig+0x14a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800355e:	d004      	beq.n	800356a <UART_SetConfig+0x14a>
 8003560:	f640 414a 	movw	r1, #3146	; 0xc4a
 8003564:	4853      	ldr	r0, [pc, #332]	; (80036b4 <UART_SetConfig+0x294>)
 8003566:	f7fd fa74 	bl	8000a52 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	2b00      	cmp	r3, #0
 8003570:	d030      	beq.n	80035d4 <UART_SetConfig+0x1b4>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	2b01      	cmp	r3, #1
 8003578:	d02c      	beq.n	80035d4 <UART_SetConfig+0x1b4>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	2b02      	cmp	r3, #2
 8003580:	d028      	beq.n	80035d4 <UART_SetConfig+0x1b4>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	2b03      	cmp	r3, #3
 8003588:	d024      	beq.n	80035d4 <UART_SetConfig+0x1b4>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2b04      	cmp	r3, #4
 8003590:	d020      	beq.n	80035d4 <UART_SetConfig+0x1b4>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	2b05      	cmp	r3, #5
 8003598:	d01c      	beq.n	80035d4 <UART_SetConfig+0x1b4>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d018      	beq.n	80035d4 <UART_SetConfig+0x1b4>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	2b07      	cmp	r3, #7
 80035a8:	d014      	beq.n	80035d4 <UART_SetConfig+0x1b4>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d010      	beq.n	80035d4 <UART_SetConfig+0x1b4>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	2b09      	cmp	r3, #9
 80035b8:	d00c      	beq.n	80035d4 <UART_SetConfig+0x1b4>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	2b0a      	cmp	r3, #10
 80035c0:	d008      	beq.n	80035d4 <UART_SetConfig+0x1b4>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	2b0b      	cmp	r3, #11
 80035c8:	d004      	beq.n	80035d4 <UART_SetConfig+0x1b4>
 80035ca:	f640 414b 	movw	r1, #3147	; 0xc4b
 80035ce:	4839      	ldr	r0, [pc, #228]	; (80036b4 <UART_SetConfig+0x294>)
 80035d0:	f7fd fa3f 	bl	8000a52 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	4b32      	ldr	r3, [pc, #200]	; (80036bc <UART_SetConfig+0x29c>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	69f9      	ldr	r1, [r7, #28]
 80035fc:	430b      	orrs	r3, r1
 80035fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a25      	ldr	r2, [pc, #148]	; (80036b8 <UART_SetConfig+0x298>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d004      	beq.n	8003630 <UART_SetConfig+0x210>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	4313      	orrs	r3, r2
 800362e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800363a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	69f9      	ldr	r1, [r7, #28]
 8003644:	430b      	orrs	r3, r1
 8003646:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	f023 010f 	bic.w	r1, r3, #15
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a17      	ldr	r2, [pc, #92]	; (80036c0 <UART_SetConfig+0x2a0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d12d      	bne.n	80036c4 <UART_SetConfig+0x2a4>
 8003668:	2003      	movs	r0, #3
 800366a:	f7ff fe31 	bl	80032d0 <LL_RCC_GetUSARTClockSource>
 800366e:	4603      	mov	r3, r0
 8003670:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003674:	2b03      	cmp	r3, #3
 8003676:	d817      	bhi.n	80036a8 <UART_SetConfig+0x288>
 8003678:	a201      	add	r2, pc, #4	; (adr r2, 8003680 <UART_SetConfig+0x260>)
 800367a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367e:	bf00      	nop
 8003680:	08003691 	.word	0x08003691
 8003684:	0800369d 	.word	0x0800369d
 8003688:	08003697 	.word	0x08003697
 800368c:	080036a3 	.word	0x080036a3
 8003690:	2301      	movs	r3, #1
 8003692:	76fb      	strb	r3, [r7, #27]
 8003694:	e07c      	b.n	8003790 <UART_SetConfig+0x370>
 8003696:	2302      	movs	r3, #2
 8003698:	76fb      	strb	r3, [r7, #27]
 800369a:	e079      	b.n	8003790 <UART_SetConfig+0x370>
 800369c:	2304      	movs	r3, #4
 800369e:	76fb      	strb	r3, [r7, #27]
 80036a0:	e076      	b.n	8003790 <UART_SetConfig+0x370>
 80036a2:	2308      	movs	r3, #8
 80036a4:	76fb      	strb	r3, [r7, #27]
 80036a6:	e073      	b.n	8003790 <UART_SetConfig+0x370>
 80036a8:	2310      	movs	r3, #16
 80036aa:	76fb      	strb	r3, [r7, #27]
 80036ac:	e070      	b.n	8003790 <UART_SetConfig+0x370>
 80036ae:	bf00      	nop
 80036b0:	005b8d80 	.word	0x005b8d80
 80036b4:	08004518 	.word	0x08004518
 80036b8:	40008000 	.word	0x40008000
 80036bc:	cfff69f3 	.word	0xcfff69f3
 80036c0:	40013800 	.word	0x40013800
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4aaf      	ldr	r2, [pc, #700]	; (8003988 <UART_SetConfig+0x568>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d133      	bne.n	8003736 <UART_SetConfig+0x316>
 80036ce:	200c      	movs	r0, #12
 80036d0:	f7ff fdfe 	bl	80032d0 <LL_RCC_GetUSARTClockSource>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	d828      	bhi.n	8003730 <UART_SetConfig+0x310>
 80036de:	a201      	add	r2, pc, #4	; (adr r2, 80036e4 <UART_SetConfig+0x2c4>)
 80036e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e4:	08003719 	.word	0x08003719
 80036e8:	08003731 	.word	0x08003731
 80036ec:	08003731 	.word	0x08003731
 80036f0:	08003731 	.word	0x08003731
 80036f4:	08003725 	.word	0x08003725
 80036f8:	08003731 	.word	0x08003731
 80036fc:	08003731 	.word	0x08003731
 8003700:	08003731 	.word	0x08003731
 8003704:	0800371f 	.word	0x0800371f
 8003708:	08003731 	.word	0x08003731
 800370c:	08003731 	.word	0x08003731
 8003710:	08003731 	.word	0x08003731
 8003714:	0800372b 	.word	0x0800372b
 8003718:	2300      	movs	r3, #0
 800371a:	76fb      	strb	r3, [r7, #27]
 800371c:	e038      	b.n	8003790 <UART_SetConfig+0x370>
 800371e:	2302      	movs	r3, #2
 8003720:	76fb      	strb	r3, [r7, #27]
 8003722:	e035      	b.n	8003790 <UART_SetConfig+0x370>
 8003724:	2304      	movs	r3, #4
 8003726:	76fb      	strb	r3, [r7, #27]
 8003728:	e032      	b.n	8003790 <UART_SetConfig+0x370>
 800372a:	2308      	movs	r3, #8
 800372c:	76fb      	strb	r3, [r7, #27]
 800372e:	e02f      	b.n	8003790 <UART_SetConfig+0x370>
 8003730:	2310      	movs	r3, #16
 8003732:	76fb      	strb	r3, [r7, #27]
 8003734:	e02c      	b.n	8003790 <UART_SetConfig+0x370>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a94      	ldr	r2, [pc, #592]	; (800398c <UART_SetConfig+0x56c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d125      	bne.n	800378c <UART_SetConfig+0x36c>
 8003740:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003744:	f7ff fdd6 	bl	80032f4 <LL_RCC_GetLPUARTClockSource>
 8003748:	4603      	mov	r3, r0
 800374a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800374e:	d017      	beq.n	8003780 <UART_SetConfig+0x360>
 8003750:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003754:	d817      	bhi.n	8003786 <UART_SetConfig+0x366>
 8003756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800375a:	d00b      	beq.n	8003774 <UART_SetConfig+0x354>
 800375c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003760:	d811      	bhi.n	8003786 <UART_SetConfig+0x366>
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <UART_SetConfig+0x34e>
 8003766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800376a:	d006      	beq.n	800377a <UART_SetConfig+0x35a>
 800376c:	e00b      	b.n	8003786 <UART_SetConfig+0x366>
 800376e:	2300      	movs	r3, #0
 8003770:	76fb      	strb	r3, [r7, #27]
 8003772:	e00d      	b.n	8003790 <UART_SetConfig+0x370>
 8003774:	2302      	movs	r3, #2
 8003776:	76fb      	strb	r3, [r7, #27]
 8003778:	e00a      	b.n	8003790 <UART_SetConfig+0x370>
 800377a:	2304      	movs	r3, #4
 800377c:	76fb      	strb	r3, [r7, #27]
 800377e:	e007      	b.n	8003790 <UART_SetConfig+0x370>
 8003780:	2308      	movs	r3, #8
 8003782:	76fb      	strb	r3, [r7, #27]
 8003784:	e004      	b.n	8003790 <UART_SetConfig+0x370>
 8003786:	2310      	movs	r3, #16
 8003788:	76fb      	strb	r3, [r7, #27]
 800378a:	e001      	b.n	8003790 <UART_SetConfig+0x370>
 800378c:	2310      	movs	r3, #16
 800378e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a7d      	ldr	r2, [pc, #500]	; (800398c <UART_SetConfig+0x56c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	f040 808b 	bne.w	80038b2 <UART_SetConfig+0x492>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800379c:	7efb      	ldrb	r3, [r7, #27]
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d823      	bhi.n	80037ea <UART_SetConfig+0x3ca>
 80037a2:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <UART_SetConfig+0x388>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037cd 	.word	0x080037cd
 80037ac:	080037eb 	.word	0x080037eb
 80037b0:	080037d5 	.word	0x080037d5
 80037b4:	080037eb 	.word	0x080037eb
 80037b8:	080037db 	.word	0x080037db
 80037bc:	080037eb 	.word	0x080037eb
 80037c0:	080037eb 	.word	0x080037eb
 80037c4:	080037eb 	.word	0x080037eb
 80037c8:	080037e3 	.word	0x080037e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037cc:	f7ff f93a 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 80037d0:	6178      	str	r0, [r7, #20]
        break;
 80037d2:	e00f      	b.n	80037f4 <UART_SetConfig+0x3d4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037d4:	4b6e      	ldr	r3, [pc, #440]	; (8003990 <UART_SetConfig+0x570>)
 80037d6:	617b      	str	r3, [r7, #20]
        break;
 80037d8:	e00c      	b.n	80037f4 <UART_SetConfig+0x3d4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037da:	f7ff f87f 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 80037de:	6178      	str	r0, [r7, #20]
        break;
 80037e0:	e008      	b.n	80037f4 <UART_SetConfig+0x3d4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037e6:	617b      	str	r3, [r7, #20]
        break;
 80037e8:	e004      	b.n	80037f4 <UART_SetConfig+0x3d4>
      default:
        pclk = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	76bb      	strb	r3, [r7, #26]
        break;
 80037f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 8122 	beq.w	8003a40 <UART_SetConfig+0x620>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	4a64      	ldr	r2, [pc, #400]	; (8003994 <UART_SetConfig+0x574>)
 8003802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003806:	461a      	mov	r2, r3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	fbb3 f3f2 	udiv	r3, r3, r2
 800380e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	4413      	add	r3, r2
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	429a      	cmp	r2, r3
 800381e:	d305      	bcc.n	800382c <UART_SetConfig+0x40c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	429a      	cmp	r2, r3
 800382a:	d902      	bls.n	8003832 <UART_SetConfig+0x412>
      {
        ret = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	76bb      	strb	r3, [r7, #26]
 8003830:	e106      	b.n	8003a40 <UART_SetConfig+0x620>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	4618      	mov	r0, r3
 8003836:	f04f 0100 	mov.w	r1, #0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	4a55      	ldr	r2, [pc, #340]	; (8003994 <UART_SetConfig+0x574>)
 8003840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003844:	b29a      	uxth	r2, r3
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	f7fc fc95 	bl	8000178 <__aeabi_uldivmod>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4610      	mov	r0, r2
 8003854:	4619      	mov	r1, r3
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	020b      	lsls	r3, r1, #8
 8003860:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003864:	0202      	lsls	r2, r0, #8
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	6849      	ldr	r1, [r1, #4]
 800386a:	0849      	lsrs	r1, r1, #1
 800386c:	4608      	mov	r0, r1
 800386e:	f04f 0100 	mov.w	r1, #0
 8003872:	1814      	adds	r4, r2, r0
 8003874:	eb43 0501 	adc.w	r5, r3, r1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	461a      	mov	r2, r3
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	4620      	mov	r0, r4
 8003884:	4629      	mov	r1, r5
 8003886:	f7fc fc77 	bl	8000178 <__aeabi_uldivmod>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4613      	mov	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003898:	d308      	bcc.n	80038ac <UART_SetConfig+0x48c>
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038a0:	d204      	bcs.n	80038ac <UART_SetConfig+0x48c>
        {
          huart->Instance->BRR = usartdiv;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	60da      	str	r2, [r3, #12]
 80038aa:	e0c9      	b.n	8003a40 <UART_SetConfig+0x620>
        }
        else
        {
          ret = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	76bb      	strb	r3, [r7, #26]
 80038b0:	e0c6      	b.n	8003a40 <UART_SetConfig+0x620>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ba:	d16d      	bne.n	8003998 <UART_SetConfig+0x578>
  {
    switch (clocksource)
 80038bc:	7efb      	ldrb	r3, [r7, #27]
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d827      	bhi.n	8003912 <UART_SetConfig+0x4f2>
 80038c2:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <UART_SetConfig+0x4a8>)
 80038c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c8:	080038ed 	.word	0x080038ed
 80038cc:	080038f5 	.word	0x080038f5
 80038d0:	080038fd 	.word	0x080038fd
 80038d4:	08003913 	.word	0x08003913
 80038d8:	08003903 	.word	0x08003903
 80038dc:	08003913 	.word	0x08003913
 80038e0:	08003913 	.word	0x08003913
 80038e4:	08003913 	.word	0x08003913
 80038e8:	0800390b 	.word	0x0800390b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ec:	f7ff f8aa 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 80038f0:	6178      	str	r0, [r7, #20]
        break;
 80038f2:	e013      	b.n	800391c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038f4:	f7ff f8b8 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 80038f8:	6178      	str	r0, [r7, #20]
        break;
 80038fa:	e00f      	b.n	800391c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038fc:	4b24      	ldr	r3, [pc, #144]	; (8003990 <UART_SetConfig+0x570>)
 80038fe:	617b      	str	r3, [r7, #20]
        break;
 8003900:	e00c      	b.n	800391c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003902:	f7fe ffeb 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 8003906:	6178      	str	r0, [r7, #20]
        break;
 8003908:	e008      	b.n	800391c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800390a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800390e:	617b      	str	r3, [r7, #20]
        break;
 8003910:	e004      	b.n	800391c <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	76bb      	strb	r3, [r7, #26]
        break;
 800391a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 808e 	beq.w	8003a40 <UART_SetConfig+0x620>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	4a1a      	ldr	r2, [pc, #104]	; (8003994 <UART_SetConfig+0x574>)
 800392a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800392e:	461a      	mov	r2, r3
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	fbb3 f3f2 	udiv	r3, r3, r2
 8003936:	005a      	lsls	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	085b      	lsrs	r3, r3, #1
 800393e:	441a      	add	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	b29b      	uxth	r3, r3
 800394a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	2b0f      	cmp	r3, #15
 8003950:	d916      	bls.n	8003980 <UART_SetConfig+0x560>
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003958:	d212      	bcs.n	8003980 <UART_SetConfig+0x560>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	b29b      	uxth	r3, r3
 800395e:	f023 030f 	bic.w	r3, r3, #15
 8003962:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	b29b      	uxth	r3, r3
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	b29a      	uxth	r2, r3
 8003970:	89fb      	ldrh	r3, [r7, #14]
 8003972:	4313      	orrs	r3, r2
 8003974:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	89fa      	ldrh	r2, [r7, #14]
 800397c:	60da      	str	r2, [r3, #12]
 800397e:	e05f      	b.n	8003a40 <UART_SetConfig+0x620>
      }
      else
      {
        ret = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	76bb      	strb	r3, [r7, #26]
 8003984:	e05c      	b.n	8003a40 <UART_SetConfig+0x620>
 8003986:	bf00      	nop
 8003988:	40004400 	.word	0x40004400
 800398c:	40008000 	.word	0x40008000
 8003990:	00f42400 	.word	0x00f42400
 8003994:	080046a4 	.word	0x080046a4
      }
    }
  }
  else
  {
    switch (clocksource)
 8003998:	7efb      	ldrb	r3, [r7, #27]
 800399a:	2b08      	cmp	r3, #8
 800399c:	d827      	bhi.n	80039ee <UART_SetConfig+0x5ce>
 800399e:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <UART_SetConfig+0x584>)
 80039a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a4:	080039c9 	.word	0x080039c9
 80039a8:	080039d1 	.word	0x080039d1
 80039ac:	080039d9 	.word	0x080039d9
 80039b0:	080039ef 	.word	0x080039ef
 80039b4:	080039df 	.word	0x080039df
 80039b8:	080039ef 	.word	0x080039ef
 80039bc:	080039ef 	.word	0x080039ef
 80039c0:	080039ef 	.word	0x080039ef
 80039c4:	080039e7 	.word	0x080039e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c8:	f7ff f83c 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 80039cc:	6178      	str	r0, [r7, #20]
        break;
 80039ce:	e013      	b.n	80039f8 <UART_SetConfig+0x5d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039d0:	f7ff f84a 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 80039d4:	6178      	str	r0, [r7, #20]
        break;
 80039d6:	e00f      	b.n	80039f8 <UART_SetConfig+0x5d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039d8:	4b23      	ldr	r3, [pc, #140]	; (8003a68 <UART_SetConfig+0x648>)
 80039da:	617b      	str	r3, [r7, #20]
        break;
 80039dc:	e00c      	b.n	80039f8 <UART_SetConfig+0x5d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039de:	f7fe ff7d 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 80039e2:	6178      	str	r0, [r7, #20]
        break;
 80039e4:	e008      	b.n	80039f8 <UART_SetConfig+0x5d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ea:	617b      	str	r3, [r7, #20]
        break;
 80039ec:	e004      	b.n	80039f8 <UART_SetConfig+0x5d8>
      default:
        pclk = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	76bb      	strb	r3, [r7, #26]
        break;
 80039f6:	bf00      	nop
    }

    if (pclk != 0U)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d020      	beq.n	8003a40 <UART_SetConfig+0x620>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	4a1a      	ldr	r2, [pc, #104]	; (8003a6c <UART_SetConfig+0x64c>)
 8003a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	441a      	add	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	2b0f      	cmp	r3, #15
 8003a28:	d908      	bls.n	8003a3c <UART_SetConfig+0x61c>
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a30:	d204      	bcs.n	8003a3c <UART_SetConfig+0x61c>
      {
        huart->Instance->BRR = usartdiv;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	e001      	b.n	8003a40 <UART_SetConfig+0x620>
      }
      else
      {
        ret = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003a5c:	7ebb      	ldrb	r3, [r7, #26]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3720      	adds	r7, #32
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bdb0      	pop	{r4, r5, r7, pc}
 8003a66:	bf00      	nop
 8003a68:	00f42400 	.word	0x00f42400
 8003a6c:	080046a4 	.word	0x080046a4

08003a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	2bff      	cmp	r3, #255	; 0xff
 8003a7e:	d904      	bls.n	8003a8a <UART_AdvFeatureConfig+0x1a>
 8003a80:	f640 510c 	movw	r1, #3340	; 0xd0c
 8003a84:	489a      	ldr	r0, [pc, #616]	; (8003cf0 <UART_AdvFeatureConfig+0x280>)
 8003a86:	f7fc ffe4 	bl	8000a52 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d018      	beq.n	8003ac8 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <UART_AdvFeatureConfig+0x42>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aa6:	d004      	beq.n	8003ab2 <UART_AdvFeatureConfig+0x42>
 8003aa8:	f640 5111 	movw	r1, #3345	; 0xd11
 8003aac:	4890      	ldr	r0, [pc, #576]	; (8003cf0 <UART_AdvFeatureConfig+0x280>)
 8003aae:	f7fc ffd0 	bl	8000a52 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d018      	beq.n	8003b06 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d009      	beq.n	8003af0 <UART_AdvFeatureConfig+0x80>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae4:	d004      	beq.n	8003af0 <UART_AdvFeatureConfig+0x80>
 8003ae6:	f640 5118 	movw	r1, #3352	; 0xd18
 8003aea:	4881      	ldr	r0, [pc, #516]	; (8003cf0 <UART_AdvFeatureConfig+0x280>)
 8003aec:	f7fc ffb1 	bl	8000a52 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d018      	beq.n	8003b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d009      	beq.n	8003b2e <UART_AdvFeatureConfig+0xbe>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b22:	d004      	beq.n	8003b2e <UART_AdvFeatureConfig+0xbe>
 8003b24:	f640 511f 	movw	r1, #3359	; 0xd1f
 8003b28:	4871      	ldr	r0, [pc, #452]	; (8003cf0 <UART_AdvFeatureConfig+0x280>)
 8003b2a:	f7fc ff92 	bl	8000a52 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d018      	beq.n	8003b82 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d009      	beq.n	8003b6c <UART_AdvFeatureConfig+0xfc>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b60:	d004      	beq.n	8003b6c <UART_AdvFeatureConfig+0xfc>
 8003b62:	f640 5126 	movw	r1, #3366	; 0xd26
 8003b66:	4862      	ldr	r0, [pc, #392]	; (8003cf0 <UART_AdvFeatureConfig+0x280>)
 8003b68:	f7fc ff73 	bl	8000a52 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d018      	beq.n	8003bc0 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <UART_AdvFeatureConfig+0x13a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9e:	d004      	beq.n	8003baa <UART_AdvFeatureConfig+0x13a>
 8003ba0:	f640 512d 	movw	r1, #3373	; 0xd2d
 8003ba4:	4852      	ldr	r0, [pc, #328]	; (8003cf0 <UART_AdvFeatureConfig+0x280>)
 8003ba6:	f7fc ff54 	bl	8000a52 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d018      	beq.n	8003bfe <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d009      	beq.n	8003be8 <UART_AdvFeatureConfig+0x178>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bdc:	d004      	beq.n	8003be8 <UART_AdvFeatureConfig+0x178>
 8003bde:	f640 5134 	movw	r1, #3380	; 0xd34
 8003be2:	4843      	ldr	r0, [pc, #268]	; (8003cf0 <UART_AdvFeatureConfig+0x280>)
 8003be4:	f7fc ff35 	bl	8000a52 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d04f      	beq.n	8003caa <UART_AdvFeatureConfig+0x23a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a39      	ldr	r2, [pc, #228]	; (8003cf4 <UART_AdvFeatureConfig+0x284>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d009      	beq.n	8003c28 <UART_AdvFeatureConfig+0x1b8>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a37      	ldr	r2, [pc, #220]	; (8003cf8 <UART_AdvFeatureConfig+0x288>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <UART_AdvFeatureConfig+0x1b8>
 8003c1e:	f640 513b 	movw	r1, #3387	; 0xd3b
 8003c22:	4833      	ldr	r0, [pc, #204]	; (8003cf0 <UART_AdvFeatureConfig+0x280>)
 8003c24:	f7fc ff15 	bl	8000a52 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d009      	beq.n	8003c44 <UART_AdvFeatureConfig+0x1d4>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c38:	d004      	beq.n	8003c44 <UART_AdvFeatureConfig+0x1d4>
 8003c3a:	f640 513c 	movw	r1, #3388	; 0xd3c
 8003c3e:	482c      	ldr	r0, [pc, #176]	; (8003cf0 <UART_AdvFeatureConfig+0x280>)
 8003c40:	f7fc ff07 	bl	8000a52 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c62:	d122      	bne.n	8003caa <UART_AdvFeatureConfig+0x23a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d013      	beq.n	8003c94 <UART_AdvFeatureConfig+0x224>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c74:	d00e      	beq.n	8003c94 <UART_AdvFeatureConfig+0x224>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7e:	d009      	beq.n	8003c94 <UART_AdvFeatureConfig+0x224>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c88:	d004      	beq.n	8003c94 <UART_AdvFeatureConfig+0x224>
 8003c8a:	f640 5141 	movw	r1, #3393	; 0xd41
 8003c8e:	4818      	ldr	r0, [pc, #96]	; (8003cf0 <UART_AdvFeatureConfig+0x280>)
 8003c90:	f7fc fedf 	bl	8000a52 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d018      	beq.n	8003ce8 <UART_AdvFeatureConfig+0x278>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <UART_AdvFeatureConfig+0x262>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cc6:	d004      	beq.n	8003cd2 <UART_AdvFeatureConfig+0x262>
 8003cc8:	f640 5149 	movw	r1, #3401	; 0xd49
 8003ccc:	4808      	ldr	r0, [pc, #32]	; (8003cf0 <UART_AdvFeatureConfig+0x280>)
 8003cce:	f7fc fec0 	bl	8000a52 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]
  }
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	08004518 	.word	0x08004518
 8003cf4:	40013800 	.word	0x40013800
 8003cf8:	40004400 	.word	0x40004400

08003cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d0c:	f7fc fffa 	bl	8000d04 <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d10e      	bne.n	8003d3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f82f 	bl	8003d92 <UART_WaitOnFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e025      	b.n	8003d8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d10e      	bne.n	8003d6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f819 	bl	8003d92 <UART_WaitOnFlagUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e00f      	b.n	8003d8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b09c      	sub	sp, #112	; 0x70
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da2:	e0a9      	b.n	8003ef8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	f000 80a5 	beq.w	8003ef8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dae:	f7fc ffa9 	bl	8000d04 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d302      	bcc.n	8003dc4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003dbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d140      	bne.n	8003e46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dcc:	e853 3f00 	ldrex	r3, [r3]
 8003dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dd8:	667b      	str	r3, [r7, #100]	; 0x64
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003de2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003de4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003de8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003dea:	e841 2300 	strex	r3, r2, [r1]
 8003dee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1e6      	bne.n	8003dc4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e00:	e853 3f00 	ldrex	r3, [r3]
 8003e04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3308      	adds	r3, #8
 8003e14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e16:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e5      	bne.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e069      	b.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d051      	beq.n	8003ef8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e62:	d149      	bne.n	8003ef8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	e853 3f00 	ldrex	r3, [r3]
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e94:	e841 2300 	strex	r3, r2, [r1]
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e6      	bne.n	8003e6e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3308      	adds	r3, #8
 8003ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	e853 3f00 	ldrex	r3, [r3]
 8003eae:	613b      	str	r3, [r7, #16]
   return(result);
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f023 0301 	bic.w	r3, r3, #1
 8003eb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3308      	adds	r3, #8
 8003ebe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ec0:	623a      	str	r2, [r7, #32]
 8003ec2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec4:	69f9      	ldr	r1, [r7, #28]
 8003ec6:	6a3a      	ldr	r2, [r7, #32]
 8003ec8:	e841 2300 	strex	r3, r2, [r1]
 8003ecc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1e5      	bne.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e010      	b.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69da      	ldr	r2, [r3, #28]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	4013      	ands	r3, r2
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	bf0c      	ite	eq
 8003f08:	2301      	moveq	r3, #1
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	79fb      	ldrb	r3, [r7, #7]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	f43f af46 	beq.w	8003da4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3770      	adds	r7, #112	; 0x70
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a22      	ldr	r2, [pc, #136]	; (8003fbc <HAL_UARTEx_DisableFifoMode+0x98>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00e      	beq.n	8003f54 <HAL_UARTEx_DisableFifoMode+0x30>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a21      	ldr	r2, [pc, #132]	; (8003fc0 <HAL_UARTEx_DisableFifoMode+0x9c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d009      	beq.n	8003f54 <HAL_UARTEx_DisableFifoMode+0x30>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a1f      	ldr	r2, [pc, #124]	; (8003fc4 <HAL_UARTEx_DisableFifoMode+0xa0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d004      	beq.n	8003f54 <HAL_UARTEx_DisableFifoMode+0x30>
 8003f4a:	f44f 710d 	mov.w	r1, #564	; 0x234
 8003f4e:	481e      	ldr	r0, [pc, #120]	; (8003fc8 <HAL_UARTEx_DisableFifoMode+0xa4>)
 8003f50:	f7fc fd7f 	bl	8000a52 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_UARTEx_DisableFifoMode+0x3e>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e027      	b.n	8003fb2 <HAL_UARTEx_DisableFifoMode+0x8e>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2224      	movs	r2, #36	; 0x24
 8003f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0201 	bic.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003f90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40013800 	.word	0x40013800
 8003fc0:	40004400 	.word	0x40004400
 8003fc4:	40008000 	.word	0x40008000
 8003fc8:	0800458c 	.word	0x0800458c

08003fcc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a33      	ldr	r2, [pc, #204]	; (80040a8 <HAL_UARTEx_SetTxFifoThreshold+0xdc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00e      	beq.n	8003ffe <HAL_UARTEx_SetTxFifoThreshold+0x32>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a31      	ldr	r2, [pc, #196]	; (80040ac <HAL_UARTEx_SetTxFifoThreshold+0xe0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d009      	beq.n	8003ffe <HAL_UARTEx_SetTxFifoThreshold+0x32>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a30      	ldr	r2, [pc, #192]	; (80040b0 <HAL_UARTEx_SetTxFifoThreshold+0xe4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <HAL_UARTEx_SetTxFifoThreshold+0x32>
 8003ff4:	f240 2162 	movw	r1, #610	; 0x262
 8003ff8:	482e      	ldr	r0, [pc, #184]	; (80040b4 <HAL_UARTEx_SetTxFifoThreshold+0xe8>)
 8003ffa:	f7fc fd2a 	bl	8000a52 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d018      	beq.n	8004036 <HAL_UARTEx_SetTxFifoThreshold+0x6a>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800400a:	d014      	beq.n	8004036 <HAL_UARTEx_SetTxFifoThreshold+0x6a>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004012:	d010      	beq.n	8004036 <HAL_UARTEx_SetTxFifoThreshold+0x6a>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800401a:	d00c      	beq.n	8004036 <HAL_UARTEx_SetTxFifoThreshold+0x6a>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004022:	d008      	beq.n	8004036 <HAL_UARTEx_SetTxFifoThreshold+0x6a>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800402a:	d004      	beq.n	8004036 <HAL_UARTEx_SetTxFifoThreshold+0x6a>
 800402c:	f240 2163 	movw	r1, #611	; 0x263
 8004030:	4820      	ldr	r0, [pc, #128]	; (80040b4 <HAL_UARTEx_SetTxFifoThreshold+0xe8>)
 8004032:	f7fc fd0e 	bl	8000a52 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_UARTEx_SetTxFifoThreshold+0x78>
 8004040:	2302      	movs	r3, #2
 8004042:	e02d      	b.n	80040a0 <HAL_UARTEx_SetTxFifoThreshold+0xd4>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2224      	movs	r2, #36	; 0x24
 8004050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f88f 	bl	80041a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40013800 	.word	0x40013800
 80040ac:	40004400 	.word	0x40004400
 80040b0:	40008000 	.word	0x40008000
 80040b4:	0800458c 	.word	0x0800458c

080040b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a33      	ldr	r2, [pc, #204]	; (8004194 <HAL_UARTEx_SetRxFifoThreshold+0xdc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00e      	beq.n	80040ea <HAL_UARTEx_SetRxFifoThreshold+0x32>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a31      	ldr	r2, [pc, #196]	; (8004198 <HAL_UARTEx_SetRxFifoThreshold+0xe0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d009      	beq.n	80040ea <HAL_UARTEx_SetRxFifoThreshold+0x32>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a30      	ldr	r2, [pc, #192]	; (800419c <HAL_UARTEx_SetRxFifoThreshold+0xe4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d004      	beq.n	80040ea <HAL_UARTEx_SetRxFifoThreshold+0x32>
 80040e0:	f240 2193 	movw	r1, #659	; 0x293
 80040e4:	482e      	ldr	r0, [pc, #184]	; (80041a0 <HAL_UARTEx_SetRxFifoThreshold+0xe8>)
 80040e6:	f7fc fcb4 	bl	8000a52 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d018      	beq.n	8004122 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040f6:	d014      	beq.n	8004122 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040fe:	d010      	beq.n	8004122 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004106:	d00c      	beq.n	8004122 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800410e:	d008      	beq.n	8004122 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004116:	d004      	beq.n	8004122 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
 8004118:	f44f 7125 	mov.w	r1, #660	; 0x294
 800411c:	4820      	ldr	r0, [pc, #128]	; (80041a0 <HAL_UARTEx_SetRxFifoThreshold+0xe8>)
 800411e:	f7fc fc98 	bl	8000a52 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800412c:	2302      	movs	r3, #2
 800412e:	e02d      	b.n	800418c <HAL_UARTEx_SetRxFifoThreshold+0xd4>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2224      	movs	r2, #36	; 0x24
 800413c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0201 	bic.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f819 	bl	80041a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40013800 	.word	0x40013800
 8004198:	40004400 	.word	0x40004400
 800419c:	40008000 	.word	0x40008000
 80041a0:	0800458c 	.word	0x0800458c

080041a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d108      	bne.n	80041c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80041c4:	e031      	b.n	800422a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80041c6:	2308      	movs	r3, #8
 80041c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041ca:	2308      	movs	r3, #8
 80041cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	0e5b      	lsrs	r3, r3, #25
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	0f5b      	lsrs	r3, r3, #29
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041ee:	7bbb      	ldrb	r3, [r7, #14]
 80041f0:	7b3a      	ldrb	r2, [r7, #12]
 80041f2:	4910      	ldr	r1, [pc, #64]	; (8004234 <UARTEx_SetNbDataToProcess+0x90>)
 80041f4:	5c8a      	ldrb	r2, [r1, r2]
 80041f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80041fa:	7b3a      	ldrb	r2, [r7, #12]
 80041fc:	490e      	ldr	r1, [pc, #56]	; (8004238 <UARTEx_SetNbDataToProcess+0x94>)
 80041fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004200:	fb93 f3f2 	sdiv	r3, r3, r2
 8004204:	b29a      	uxth	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	7b7a      	ldrb	r2, [r7, #13]
 8004210:	4908      	ldr	r1, [pc, #32]	; (8004234 <UARTEx_SetNbDataToProcess+0x90>)
 8004212:	5c8a      	ldrb	r2, [r1, r2]
 8004214:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004218:	7b7a      	ldrb	r2, [r7, #13]
 800421a:	4907      	ldr	r1, [pc, #28]	; (8004238 <UARTEx_SetNbDataToProcess+0x94>)
 800421c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800421e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004222:	b29a      	uxth	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800422a:	bf00      	nop
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr
 8004234:	080046bc 	.word	0x080046bc
 8004238:	080046c4 	.word	0x080046c4

0800423c <__libc_init_array>:
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	4d0d      	ldr	r5, [pc, #52]	; (8004274 <__libc_init_array+0x38>)
 8004240:	4c0d      	ldr	r4, [pc, #52]	; (8004278 <__libc_init_array+0x3c>)
 8004242:	1b64      	subs	r4, r4, r5
 8004244:	10a4      	asrs	r4, r4, #2
 8004246:	2600      	movs	r6, #0
 8004248:	42a6      	cmp	r6, r4
 800424a:	d109      	bne.n	8004260 <__libc_init_array+0x24>
 800424c:	4d0b      	ldr	r5, [pc, #44]	; (800427c <__libc_init_array+0x40>)
 800424e:	4c0c      	ldr	r4, [pc, #48]	; (8004280 <__libc_init_array+0x44>)
 8004250:	f000 f820 	bl	8004294 <_init>
 8004254:	1b64      	subs	r4, r4, r5
 8004256:	10a4      	asrs	r4, r4, #2
 8004258:	2600      	movs	r6, #0
 800425a:	42a6      	cmp	r6, r4
 800425c:	d105      	bne.n	800426a <__libc_init_array+0x2e>
 800425e:	bd70      	pop	{r4, r5, r6, pc}
 8004260:	f855 3b04 	ldr.w	r3, [r5], #4
 8004264:	4798      	blx	r3
 8004266:	3601      	adds	r6, #1
 8004268:	e7ee      	b.n	8004248 <__libc_init_array+0xc>
 800426a:	f855 3b04 	ldr.w	r3, [r5], #4
 800426e:	4798      	blx	r3
 8004270:	3601      	adds	r6, #1
 8004272:	e7f2      	b.n	800425a <__libc_init_array+0x1e>
 8004274:	080046d4 	.word	0x080046d4
 8004278:	080046d4 	.word	0x080046d4
 800427c:	080046d4 	.word	0x080046d4
 8004280:	080046d8 	.word	0x080046d8

08004284 <memset>:
 8004284:	4402      	add	r2, r0
 8004286:	4603      	mov	r3, r0
 8004288:	4293      	cmp	r3, r2
 800428a:	d100      	bne.n	800428e <memset+0xa>
 800428c:	4770      	bx	lr
 800428e:	f803 1b01 	strb.w	r1, [r3], #1
 8004292:	e7f9      	b.n	8004288 <memset+0x4>

08004294 <_init>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	bf00      	nop
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr

080042a0 <_fini>:
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	bf00      	nop
 80042a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a6:	bc08      	pop	{r3}
 80042a8:	469e      	mov	lr, r3
 80042aa:	4770      	bx	lr
